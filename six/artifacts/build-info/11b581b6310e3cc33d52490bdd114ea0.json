{
	"id": "11b581b6310e3cc33d52490bdd114ea0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"six/DiscreteStakingRewards.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract DiscreteStakingRewards {\r\n    // 质押代币合约地址（如LP Token）\r\n    IERC20 public immutable stakingToken;\r\n    // 奖励代币合约地址\r\n    IERC20 public immutable rewardToken;\r\n\r\n    // 用户质押余额记录\r\n    mapping(address => uint) public balanceOf;\r\n    // 总质押量\r\n    uint public totalSupply;\r\n\r\n    // 精度扩展因子（解决整数运算精度问题）\r\n    uint private constant MULTIPLIER = 1e18;\r\n\r\n    // 全局奖励指数（每单位质押代币累积的奖励）\r\n    uint private rewardIndex;\r\n    // 用户待领取奖励存储\r\n    mapping(address => uint) private earned;\r\n    // 用户最后一次更新时的奖励指数\r\n    mapping(address => uint) private rewardIndexOf;\r\n\r\n    constructor(address _stakingToken, address _rewardToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n    }\r\n\r\n    /**\r\n     * @dev 更新全局奖励指数（仅管理员可调用）\r\n     * @param reward 注入的奖励代币数量\r\n     * 公式：rewardIndex += (reward * 1e18) / totalSupply\r\n     */\r\n    function updateRewardIndex(uint reward) external {\r\n        require(totalSupply>0,\"Total supply is zero\");\r\n        // 将奖励代币转入合约\r\n        rewardToken.transferFrom(msg.sender, address(this), reward);\r\n        // 当总质押量为0时此操作会失败（需前置检查） 每次发奖都会累加当前的奖励指数\r\n        rewardIndex += (reward * MULTIPLIER) / totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev 计算账户待领取的增量奖励\r\n     * @return 基于指数差计算的新增奖励\r\n     */\r\n    function _calculateRewards(address account) private view returns (uint) {\r\n        uint shares = balanceOf[account];\r\n        return (shares * (rewardIndex - rewardIndexOf[account])) / MULTIPLIER;\r\n    }\r\n\r\n    /**\r\n     * @dev 获取账户总待领取奖励（外部查询接口）\r\n     */\r\n    function calculateRewardEarned(address account) external view returns (uint) {\r\n        return earned[account] + _calculateRewards(account);\r\n    }\r\n\r\n    /**\r\n     * @dev 更新用户奖励状态（关键内部函数）\r\n     * 1. 将新增奖励计入earned\r\n     * 2. 更新用户奖励指数快照\r\n     */\r\n    function _updateRewards(address account) private {\r\n        //计算出来奖励\r\n        earned[account] += _calculateRewards(account);\r\n        //更新该用户的奖励指数\r\n        rewardIndexOf[account] = rewardIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev 质押操作\r\n     * @param amount 质押代币数量\r\n     */\r\n    function stake(uint amount) external {\r\n        _updateRewards(msg.sender); // 先更新奖励\r\n        balanceOf[msg.sender] += amount;\r\n        totalSupply += amount;\r\n        stakingToken.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 解除质押\r\n     * @param amount 解除质押数量\r\n     */\r\n    function unstake(uint amount) external {\r\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\r\n        _updateRewards(msg.sender);\r\n        balanceOf[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        stakingToken.transfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 领取奖励\r\n     * @return 实际领取数量\r\n     */\r\n    function claim() external returns (uint) {\r\n        _updateRewards(msg.sender);\r\n        uint reward = earned[msg.sender];\r\n        if (reward > 0) {\r\n            earned[msg.sender] = 0;\r\n            rewardToken.transfer(msg.sender, reward);\r\n        }\r\n        return reward;\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171\",\"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 159,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 167,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 169,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 171,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"six/DiscreteStakingRewards.sol": {
				"DiscreteStakingRewards": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_stakingToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_rewardToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "calculateRewardEarned",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claim",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "unstake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "reward",
									"type": "uint256"
								}
							],
							"name": "updateRewardIndex",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"calculateRewardEarned(address)": {
								"details": "获取账户总待领取奖励（外部查询接口）"
							},
							"claim()": {
								"details": "领取奖励",
								"returns": {
									"_0": "实际领取数量"
								}
							},
							"stake(uint256)": {
								"details": "质押操作",
								"params": {
									"amount": "质押代币数量"
								}
							},
							"unstake(uint256)": {
								"details": "解除质押",
								"params": {
									"amount": "解除质押数量"
								}
							},
							"updateRewardIndex(uint256)": {
								"details": "更新全局奖励指数（仅管理员可调用）",
								"params": {
									"reward": "注入的奖励代币数量 公式：rewardIndex += (reward * 1e18) / totalSupply"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"six/DiscreteStakingRewards.sol\":119:3689  contract DiscreteStakingRewards {... */\n  mstore(0x40, 0xc0)\n    /* \"six/DiscreteStakingRewards.sol\":861:1018  constructor(address _stakingToken, address _rewardToken) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"six/DiscreteStakingRewards.sol\":929:965  stakingToken = IERC20(_stakingToken) */\n  swap2\n  dup3\n  and\n  0x80\n  mstore\n    /* \"six/DiscreteStakingRewards.sol\":976:1010  rewardToken = IERC20(_rewardToken) */\n  and\n  0xa0\n  mstore\n    /* \"six/DiscreteStakingRewards.sol\":119:3689  contract DiscreteStakingRewards {... */\n  jump(tag_8)\n    /* \"#utility.yul\":14:191   */\ntag_7:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_10\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  dup1\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_10:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:489   */\ntag_3:\n    /* \"#utility.yul\":275:281   */\n  0x00\n    /* \"#utility.yul\":283:289   */\n  dup1\n    /* \"#utility.yul\":336:338   */\n  0x40\n    /* \"#utility.yul\":324:333   */\n  dup4\n    /* \"#utility.yul\":315:322   */\n  dup6\n    /* \"#utility.yul\":311:334   */\n  sub\n    /* \"#utility.yul\":307:339   */\n  slt\n    /* \"#utility.yul\":304:356   */\n  iszero\n  tag_12\n  jumpi\n    /* \"#utility.yul\":352:353   */\n  0x00\n    /* \"#utility.yul\":349:350   */\n  dup1\n    /* \"#utility.yul\":342:354   */\n  revert\n    /* \"#utility.yul\":304:356   */\ntag_12:\n    /* \"#utility.yul\":375:415   */\n  tag_13\n    /* \"#utility.yul\":405:414   */\n  dup4\n    /* \"#utility.yul\":375:415   */\n  tag_7\n  jump\t// in\ntag_13:\n    /* \"#utility.yul\":365:415   */\n  swap2\n  pop\n    /* \"#utility.yul\":434:483   */\n  tag_14\n    /* \"#utility.yul\":479:481   */\n  0x20\n    /* \"#utility.yul\":468:477   */\n  dup5\n    /* \"#utility.yul\":464:482   */\n  add\n    /* \"#utility.yul\":434:483   */\n  tag_7\n  jump\t// in\ntag_14:\n    /* \"#utility.yul\":424:483   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:489   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\ntag_8:\n    /* \"six/DiscreteStakingRewards.sol\":119:3689  contract DiscreteStakingRewards {... */\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x03065c56175bab9d6c02682cec557b5c933cd8364ccf2dd44ab76e0c260931e7\")\n  0x00\n  assignImmutable(\"0x588e5ad3f145f9d841773d4229bac23d743ef980914ad5d2b613712259f67f55\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"six/DiscreteStakingRewards.sol\":119:3689  contract DiscreteStakingRewards {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5a230162\n      gt\n      tag_12\n      jumpi\n      dup1\n      0x5a230162\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x72f702f3\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xa694fc3a\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf7c618c1\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      dup1\n      0x0dcc4b44\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2e17de78\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x4e71d92d\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"six/DiscreteStakingRewards.sol\":1221:1625  function updateRewardIndex(uint reward) external {... */\n    tag_3:\n      tag_13\n      tag_14\n      calldatasize\n      0x04\n      tag_15\n      jump\t// in\n    tag_14:\n      tag_16\n      jump\t// in\n    tag_13:\n      stop\n        /* \"six/DiscreteStakingRewards.sol\":430:453  uint public totalSupply */\n    tag_4:\n      tag_17\n      sload(0x01)\n      dup2\n      jump\n    tag_17:\n      mload(0x40)\n        /* \"#utility.yul\":345:370   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":333:335   */\n      0x20\n        /* \"#utility.yul\":318:336   */\n      add\n        /* \"six/DiscreteStakingRewards.sol\":430:453  uint public totalSupply */\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"six/DiscreteStakingRewards.sol\":3031:3316  function unstake(uint amount) external {... */\n    tag_5:\n      tag_13\n      tag_22\n      calldatasize\n      0x04\n      tag_15\n      jump\t// in\n    tag_22:\n      tag_23\n      jump\t// in\n        /* \"six/DiscreteStakingRewards.sol\":3403:3686  function claim() external returns (uint) {... */\n    tag_6:\n      tag_17\n      tag_25\n      jump\t// in\n        /* \"six/DiscreteStakingRewards.sol\":2051:2198  function calculateRewardEarned(address account) external view returns (uint) {... */\n    tag_7:\n      tag_17\n      tag_28\n      calldatasize\n      0x04\n      tag_29\n      jump\t// in\n    tag_28:\n      tag_30\n      jump\t// in\n        /* \"six/DiscreteStakingRewards.sol\":361:402  mapping(address => uint) public balanceOf */\n    tag_8:\n      tag_17\n      tag_33\n      calldatasize\n      0x04\n      tag_29\n      jump\t// in\n    tag_33:\n      0x00\n      0x20\n      dup2\n      swap1\n      mstore\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"six/DiscreteStakingRewards.sol\":208:244  IERC20 public immutable stakingToken */\n    tag_9:\n      tag_36\n      immutable(\"0x588e5ad3f145f9d841773d4229bac23d743ef980914ad5d2b613712259f67f55\")\n      dup2\n      jump\n    tag_36:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":850:882   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":832:883   */\n      dup2\n      mstore\n        /* \"#utility.yul\":820:822   */\n      0x20\n        /* \"#utility.yul\":805:823   */\n      add\n        /* \"six/DiscreteStakingRewards.sol\":208:244  IERC20 public immutable stakingToken */\n      tag_19\n        /* \"#utility.yul\":672:889   */\n      jump\n        /* \"six/DiscreteStakingRewards.sol\":2692:2938  function stake(uint amount) external {... */\n    tag_10:\n      tag_13\n      tag_41\n      calldatasize\n      0x04\n      tag_15\n      jump\t// in\n    tag_41:\n      tag_42\n      jump\t// in\n        /* \"six/DiscreteStakingRewards.sol\":284:319  IERC20 public immutable rewardToken */\n    tag_11:\n      tag_36\n      immutable(\"0x03065c56175bab9d6c02682cec557b5c933cd8364ccf2dd44ab76e0c260931e7\")\n      dup2\n      jump\n        /* \"six/DiscreteStakingRewards.sol\":1221:1625  function updateRewardIndex(uint reward) external {... */\n    tag_16:\n        /* \"six/DiscreteStakingRewards.sol\":1301:1302  0 */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":1289:1300  totalSupply */\n      sload(0x01)\n        /* \"six/DiscreteStakingRewards.sol\":1289:1302  totalSupply>0 */\n      gt\n        /* \"six/DiscreteStakingRewards.sol\":1281:1326  require(totalSupply>0,\"Total supply is zero\") */\n      tag_47\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1096:1098   */\n      0x20\n        /* \"six/DiscreteStakingRewards.sol\":1281:1326  require(totalSupply>0,\"Total supply is zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1078:1099   */\n      mstore\n        /* \"#utility.yul\":1135:1137   */\n      0x14\n        /* \"#utility.yul\":1115:1133   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1108:1138   */\n      mstore\n      shl(0x60, 0x546f74616c20737570706c79206973207a65726f)\n        /* \"#utility.yul\":1154:1172   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1147:1197   */\n      mstore\n        /* \"#utility.yul\":1214:1232   */\n      0x64\n      add\n        /* \"six/DiscreteStakingRewards.sol\":1281:1326  require(totalSupply>0,\"Total supply is zero\") */\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_47:\n        /* \"six/DiscreteStakingRewards.sol\":1377:1436  rewardToken.transferFrom(msg.sender, address(this), reward) */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":1402:1412  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":1377:1436  rewardToken.transferFrom(msg.sender, address(this), reward) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1445:1496   */\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":1422:1426  this */\n      address\n        /* \"#utility.yul\":1512:1530   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1505:1565   */\n      mstore\n        /* \"#utility.yul\":1581:1599   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":1574:1608   */\n      dup3\n      swap1\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":1377:1388  rewardToken */\n      immutable(\"0x03065c56175bab9d6c02682cec557b5c933cd8364ccf2dd44ab76e0c260931e7\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":1377:1401  rewardToken.transferFrom */\n      and\n      swap1\n      0x23b872dd\n      swap1\n        /* \"#utility.yul\":1418:1436   */\n      0x64\n      add\n        /* \"six/DiscreteStakingRewards.sol\":1377:1436  rewardToken.transferFrom(msg.sender, address(this), reward) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_53\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_53:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_54\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n    tag_54:\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":1606:1617  totalSupply */\n      sload(0x01)\n        /* \"six/DiscreteStakingRewards.sol\":1583:1602  reward * MULTIPLIER */\n      tag_56\n        /* \"six/DiscreteStakingRewards.sol\":560:564  1e18 */\n      0x0de0b6b3a7640000\n        /* \"six/DiscreteStakingRewards.sol\":1583:1589  reward */\n      dup4\n        /* \"six/DiscreteStakingRewards.sol\":1583:1602  reward * MULTIPLIER */\n      tag_57\n      jump\t// in\n    tag_56:\n        /* \"six/DiscreteStakingRewards.sol\":1582:1617  (reward * MULTIPLIER) / totalSupply */\n      tag_58\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n        /* \"six/DiscreteStakingRewards.sol\":1567:1578  rewardIndex */\n      0x02\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":1567:1617  rewardIndex += (reward * MULTIPLIER) / totalSupply */\n      dup3\n      dup3\n      sload\n      tag_60\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_60:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":1221:1625  function updateRewardIndex(uint reward) external {... */\n      jump\t// out\n        /* \"six/DiscreteStakingRewards.sol\":3031:3316  function unstake(uint amount) external {... */\n    tag_23:\n        /* \"six/DiscreteStakingRewards.sol\":3099:3109  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3089:3098  balanceOf */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":3089:3110  balanceOf[msg.sender] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":3089:3120  balanceOf[msg.sender] >= amount */\n      dup2\n      gt\n      iszero\n        /* \"six/DiscreteStakingRewards.sol\":3081:3145  require(balanceOf[msg.sender] >= amount, \"Insufficient balance\") */\n      tag_63\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2760:2762   */\n      0x20\n        /* \"six/DiscreteStakingRewards.sol\":3081:3145  require(balanceOf[msg.sender] >= amount, \"Insufficient balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2742:2763   */\n      mstore\n        /* \"#utility.yul\":2799:2801   */\n      0x14\n        /* \"#utility.yul\":2779:2797   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2772:2802   */\n      mstore\n      shl(0x60, 0x496e73756666696369656e742062616c616e6365)\n        /* \"#utility.yul\":2818:2836   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2811:2861   */\n      mstore\n        /* \"#utility.yul\":2878:2896   */\n      0x64\n      add\n        /* \"six/DiscreteStakingRewards.sol\":3081:3145  require(balanceOf[msg.sender] >= amount, \"Insufficient balance\") */\n      tag_48\n        /* \"#utility.yul\":2558:2902   */\n      jump\n        /* \"six/DiscreteStakingRewards.sol\":3081:3145  require(balanceOf[msg.sender] >= amount, \"Insufficient balance\") */\n    tag_63:\n        /* \"six/DiscreteStakingRewards.sol\":3156:3182  _updateRewards(msg.sender) */\n      tag_66\n        /* \"six/DiscreteStakingRewards.sol\":3171:3181  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3156:3170  _updateRewards */\n      tag_67\n        /* \"six/DiscreteStakingRewards.sol\":3156:3182  _updateRewards(msg.sender) */\n      jump\t// in\n    tag_66:\n        /* \"six/DiscreteStakingRewards.sol\":3203:3213  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3193:3202  balanceOf */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":3193:3214  balanceOf[msg.sender] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"six/DiscreteStakingRewards.sol\":3193:3224  balanceOf[msg.sender] -= amount */\n      dup1\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":3218:3224  amount */\n      dup4\n      swap3\n        /* \"six/DiscreteStakingRewards.sol\":3193:3202  balanceOf */\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":3193:3224  balanceOf[msg.sender] -= amount */\n      tag_68\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":3218:3224  amount */\n      dup5\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":3193:3224  balanceOf[msg.sender] -= amount */\n      tag_69\n      jump\t// in\n    tag_68:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":3250:3256  amount */\n      dup1\n        /* \"six/DiscreteStakingRewards.sol\":3235:3246  totalSupply */\n      0x01\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":3235:3256  totalSupply -= amount */\n      dup3\n      dup3\n      sload\n      tag_70\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_70:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":3267:3308  stakingToken.transfer(msg.sender, amount) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":3289:3299  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3267:3308  stakingToken.transfer(msg.sender, amount) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3214:3265   */\n      mstore\n        /* \"#utility.yul\":3281:3299   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3274:3308   */\n      dup3\n      swap1\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":3267:3279  stakingToken */\n      immutable(\"0x588e5ad3f145f9d841773d4229bac23d743ef980914ad5d2b613712259f67f55\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":3267:3288  stakingToken.transfer */\n      and\n      swap1\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":3187:3205   */\n      0x44\n      add\n        /* \"six/DiscreteStakingRewards.sol\":3267:3308  stakingToken.transfer(msg.sender, amount) */\n    tag_71:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_74\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_74:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n    tag_75:\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":3031:3316  function unstake(uint amount) external {... */\n      pop\n      jump\t// out\n        /* \"six/DiscreteStakingRewards.sol\":3403:3686  function claim() external returns (uint) {... */\n    tag_25:\n        /* \"six/DiscreteStakingRewards.sol\":3438:3442  uint */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":3455:3481  _updateRewards(msg.sender) */\n      tag_77\n        /* \"six/DiscreteStakingRewards.sol\":3470:3480  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3455:3469  _updateRewards */\n      tag_67\n        /* \"six/DiscreteStakingRewards.sol\":3455:3481  _updateRewards(msg.sender) */\n      jump\t// in\n    tag_77:\n        /* \"six/DiscreteStakingRewards.sol\":3513:3523  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3492:3503  uint reward */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":3506:3524  earned[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":3506:3512  earned */\n      0x03\n        /* \"six/DiscreteStakingRewards.sol\":3506:3524  earned[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":3539:3549  reward > 0 */\n      dup1\n      iszero\n        /* \"six/DiscreteStakingRewards.sol\":3535:3655  if (reward > 0) {... */\n      tag_78\n      jumpi\n        /* \"six/DiscreteStakingRewards.sol\":3573:3583  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":3587:3588  0 */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":3566:3584  earned[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":3566:3572  earned */\n      0x03\n        /* \"six/DiscreteStakingRewards.sol\":3566:3584  earned[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"six/DiscreteStakingRewards.sol\":3566:3588  earned[msg.sender] = 0 */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"six/DiscreteStakingRewards.sol\":3603:3643  rewardToken.transfer(msg.sender, reward) */\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":3214:3265   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3281:3299   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3274:3308   */\n      dup3\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":3603:3614  rewardToken */\n      immutable(\"0x03065c56175bab9d6c02682cec557b5c933cd8364ccf2dd44ab76e0c260931e7\")\n        /* \"six/DiscreteStakingRewards.sol\":3603:3623  rewardToken.transfer */\n      and\n      swap1\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":3187:3205   */\n      0x44\n      add\n        /* \"six/DiscreteStakingRewards.sol\":3603:3643  rewardToken.transfer(msg.sender, reward) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_81\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_82\n      swap2\n      swap1\n      tag_55\n      jump\t// in\n    tag_82:\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":3535:3655  if (reward > 0) {... */\n    tag_78:\n        /* \"six/DiscreteStakingRewards.sol\":3672:3678  reward */\n      swap2\n        /* \"six/DiscreteStakingRewards.sol\":3403:3686  function claim() external returns (uint) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"six/DiscreteStakingRewards.sol\":2051:2198  function calculateRewardEarned(address account) external view returns (uint) {... */\n    tag_30:\n        /* \"six/DiscreteStakingRewards.sol\":2122:2126  uint */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":2164:2190  _calculateRewards(account) */\n      tag_84\n        /* \"six/DiscreteStakingRewards.sol\":2182:2189  account */\n      dup3\n        /* \"six/DiscreteStakingRewards.sol\":2164:2181  _calculateRewards */\n      tag_85\n        /* \"six/DiscreteStakingRewards.sol\":2164:2190  _calculateRewards(account) */\n      jump\t// in\n    tag_84:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":2146:2161  earned[account] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":2146:2152  earned */\n      0x03\n        /* \"six/DiscreteStakingRewards.sol\":2146:2161  earned[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":2146:2190  earned[account] + _calculateRewards(account) */\n      tag_86\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_86:\n        /* \"six/DiscreteStakingRewards.sol\":2139:2190  return earned[account] + _calculateRewards(account) */\n      swap3\n        /* \"six/DiscreteStakingRewards.sol\":2051:2198  function calculateRewardEarned(address account) external view returns (uint) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"six/DiscreteStakingRewards.sol\":2692:2938  function stake(uint amount) external {... */\n    tag_42:\n        /* \"six/DiscreteStakingRewards.sol\":2740:2766  _updateRewards(msg.sender) */\n      tag_88\n        /* \"six/DiscreteStakingRewards.sol\":2755:2765  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":2740:2754  _updateRewards */\n      tag_67\n        /* \"six/DiscreteStakingRewards.sol\":2740:2766  _updateRewards(msg.sender) */\n      jump\t// in\n    tag_88:\n        /* \"six/DiscreteStakingRewards.sol\":2806:2816  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":2796:2805  balanceOf */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":2796:2817  balanceOf[msg.sender] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"six/DiscreteStakingRewards.sol\":2796:2827  balanceOf[msg.sender] += amount */\n      dup1\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":2821:2827  amount */\n      dup4\n      swap3\n        /* \"six/DiscreteStakingRewards.sol\":2796:2805  balanceOf */\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":2796:2827  balanceOf[msg.sender] += amount */\n      tag_89\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":2821:2827  amount */\n      dup5\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":2796:2827  balanceOf[msg.sender] += amount */\n      tag_61\n      jump\t// in\n    tag_89:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":2853:2859  amount */\n      dup1\n        /* \"six/DiscreteStakingRewards.sol\":2838:2849  totalSupply */\n      0x01\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":2838:2859  totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_90\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_90:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":2870:2930  stakingToken.transferFrom(msg.sender, address(this), amount) */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":2896:2906  msg.sender */\n      caller\n        /* \"six/DiscreteStakingRewards.sol\":2870:2930  stakingToken.transferFrom(msg.sender, address(this), amount) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1445:1496   */\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":2916:2920  this */\n      address\n        /* \"#utility.yul\":1512:1530   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1505:1565   */\n      mstore\n        /* \"#utility.yul\":1581:1599   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":1574:1608   */\n      dup3\n      swap1\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":2870:2882  stakingToken */\n      immutable(\"0x588e5ad3f145f9d841773d4229bac23d743ef980914ad5d2b613712259f67f55\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":2870:2895  stakingToken.transferFrom */\n      and\n      swap1\n      0x23b872dd\n      swap1\n        /* \"#utility.yul\":1418:1436   */\n      0x64\n      add\n        /* \"six/DiscreteStakingRewards.sol\":2870:2930  stakingToken.transferFrom(msg.sender, address(this), amount) */\n      tag_71\n        /* \"#utility.yul\":1243:1614   */\n      jump\n        /* \"six/DiscreteStakingRewards.sol\":2367:2599  function _updateRewards(address account) private {... */\n    tag_67:\n        /* \"six/DiscreteStakingRewards.sol\":2476:2502  _calculateRewards(account) */\n      tag_96\n        /* \"six/DiscreteStakingRewards.sol\":2494:2501  account */\n      dup2\n        /* \"six/DiscreteStakingRewards.sol\":2476:2493  _calculateRewards */\n      tag_85\n        /* \"six/DiscreteStakingRewards.sol\":2476:2502  _calculateRewards(account) */\n      jump\t// in\n    tag_96:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":2457:2472  earned[account] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":2457:2463  earned */\n      0x03\n        /* \"six/DiscreteStakingRewards.sol\":2457:2472  earned[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"six/DiscreteStakingRewards.sol\":2457:2502  earned[account] += _calculateRewards(account) */\n      dup1\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":2457:2472  earned[account] */\n      swap1\n      swap2\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":2457:2502  earned[account] += _calculateRewards(account) */\n      tag_97\n      swap1\n      dup5\n      swap1\n      tag_61\n      jump\t// in\n    tag_97:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"six/DiscreteStakingRewards.sol\":2580:2591  rewardIndex */\n      sload(0x02)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":2555:2577  rewardIndexOf[account] */\n      swap1\n      swap2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"six/DiscreteStakingRewards.sol\":2555:2568  rewardIndexOf */\n      0x04\n        /* \"six/DiscreteStakingRewards.sol\":2555:2577  rewardIndexOf[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"six/DiscreteStakingRewards.sol\":2555:2591  rewardIndexOf[account] = rewardIndex */\n      sstore\n        /* \"six/DiscreteStakingRewards.sol\":2367:2599  function _updateRewards(address account) private {... */\n      jump\t// out\n        /* \"six/DiscreteStakingRewards.sol\":1754:1957  function _calculateRewards(address account) private view returns (uint) {... */\n    tag_85:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"six/DiscreteStakingRewards.sol\":1851:1869  balanceOf[account] */\n      dup2\n      and\n        /* \"six/DiscreteStakingRewards.sol\":1820:1824  uint */\n      0x00\n        /* \"six/DiscreteStakingRewards.sol\":1851:1869  balanceOf[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":1912:1925  rewardIndexOf */\n      0x04\n        /* \"six/DiscreteStakingRewards.sol\":1912:1934  rewardIndexOf[account] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n      sload\n        /* \"six/DiscreteStakingRewards.sol\":1898:1909  rewardIndex */\n      sload(0x02)\n        /* \"six/DiscreteStakingRewards.sol\":560:564  1e18 */\n      0x0de0b6b3a7640000\n      swap2\n        /* \"six/DiscreteStakingRewards.sol\":1898:1934  rewardIndex - rewardIndexOf[account] */\n      tag_99\n      swap2\n      tag_69\n      jump\t// in\n    tag_99:\n        /* \"six/DiscreteStakingRewards.sol\":1888:1935  shares * (rewardIndex - rewardIndexOf[account]) */\n      tag_100\n      swap1\n        /* \"six/DiscreteStakingRewards.sol\":1888:1894  shares */\n      dup4\n        /* \"six/DiscreteStakingRewards.sol\":1888:1935  shares * (rewardIndex - rewardIndexOf[account]) */\n      tag_57\n      jump\t// in\n    tag_100:\n        /* \"six/DiscreteStakingRewards.sol\":1887:1949  (shares * (rewardIndex - rewardIndexOf[account])) / MULTIPLIER */\n      tag_101\n      swap2\n      swap1\n      tag_59\n      jump\t// in\n    tag_101:\n        /* \"six/DiscreteStakingRewards.sol\":1880:1949  return (shares * (rewardIndex - rewardIndexOf[account])) / MULTIPLIER */\n      swap4\n        /* \"six/DiscreteStakingRewards.sol\":1754:1957  function _calculateRewards(address account) private view returns (uint) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:194   */\n    tag_15:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_105\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_105:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":381:667   */\n    tag_29:\n        /* \"#utility.yul\":440:446   */\n      0x00\n        /* \"#utility.yul\":493:495   */\n      0x20\n        /* \"#utility.yul\":481:490   */\n      dup3\n        /* \"#utility.yul\":472:479   */\n      dup5\n        /* \"#utility.yul\":468:491   */\n      sub\n        /* \"#utility.yul\":464:496   */\n      slt\n        /* \"#utility.yul\":461:513   */\n      iszero\n      tag_108\n      jumpi\n        /* \"#utility.yul\":509:510   */\n      0x00\n        /* \"#utility.yul\":506:507   */\n      dup1\n        /* \"#utility.yul\":499:511   */\n      revert\n        /* \"#utility.yul\":461:513   */\n    tag_108:\n        /* \"#utility.yul\":535:558   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":587:618   */\n      dup2\n      and\n        /* \"#utility.yul\":577:619   */\n      dup2\n      eq\n        /* \"#utility.yul\":567:637   */\n      tag_101\n      jumpi\n        /* \"#utility.yul\":633:634   */\n      0x00\n        /* \"#utility.yul\":630:631   */\n      dup1\n        /* \"#utility.yul\":623:635   */\n      revert\n        /* \"#utility.yul\":1619:1896   */\n    tag_55:\n        /* \"#utility.yul\":1686:1692   */\n      0x00\n        /* \"#utility.yul\":1739:1741   */\n      0x20\n        /* \"#utility.yul\":1727:1736   */\n      dup3\n        /* \"#utility.yul\":1718:1725   */\n      dup5\n        /* \"#utility.yul\":1714:1737   */\n      sub\n        /* \"#utility.yul\":1710:1742   */\n      slt\n        /* \"#utility.yul\":1707:1759   */\n      iszero\n      tag_114\n      jumpi\n        /* \"#utility.yul\":1755:1756   */\n      0x00\n        /* \"#utility.yul\":1752:1753   */\n      dup1\n        /* \"#utility.yul\":1745:1757   */\n      revert\n        /* \"#utility.yul\":1707:1759   */\n    tag_114:\n        /* \"#utility.yul\":1787:1796   */\n      dup2\n        /* \"#utility.yul\":1781:1797   */\n      mload\n        /* \"#utility.yul\":1840:1845   */\n      dup1\n        /* \"#utility.yul\":1833:1846   */\n      iszero\n        /* \"#utility.yul\":1826:1847   */\n      iszero\n        /* \"#utility.yul\":1819:1824   */\n      dup2\n        /* \"#utility.yul\":1816:1848   */\n      eq\n        /* \"#utility.yul\":1806:1866   */\n      tag_101\n      jumpi\n        /* \"#utility.yul\":1862:1863   */\n      0x00\n        /* \"#utility.yul\":1859:1860   */\n      dup1\n        /* \"#utility.yul\":1852:1864   */\n      revert\n        /* \"#utility.yul\":1901:2028   */\n    tag_102:\n        /* \"#utility.yul\":1962:1972   */\n      0x4e487b71\n        /* \"#utility.yul\":1957:1960   */\n      0xe0\n        /* \"#utility.yul\":1953:1973   */\n      shl\n        /* \"#utility.yul\":1950:1951   */\n      0x00\n        /* \"#utility.yul\":1943:1974   */\n      mstore\n        /* \"#utility.yul\":1993:1997   */\n      0x11\n        /* \"#utility.yul\":1990:1991   */\n      0x04\n        /* \"#utility.yul\":1983:1998   */\n      mstore\n        /* \"#utility.yul\":2017:2021   */\n      0x24\n        /* \"#utility.yul\":2014:2015   */\n      0x00\n        /* \"#utility.yul\":2007:2022   */\n      revert\n        /* \"#utility.yul\":2033:2201   */\n    tag_57:\n        /* \"#utility.yul\":2106:2115   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":2137:2146   */\n      dup2\n      iszero\n        /* \"#utility.yul\":2154:2169   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":2148:2170   */\n      dup5\n      eq\n        /* \"#utility.yul\":2134:2171   */\n      or\n        /* \"#utility.yul\":2124:2195   */\n      tag_86\n      jumpi\n        /* \"#utility.yul\":2175:2193   */\n      tag_86\n      tag_102\n      jump\t// in\n        /* \"#utility.yul\":2206:2423   */\n    tag_59:\n        /* \"#utility.yul\":2246:2247   */\n      0x00\n        /* \"#utility.yul\":2272:2273   */\n      dup3\n        /* \"#utility.yul\":2262:2394   */\n      tag_121\n      jumpi\n        /* \"#utility.yul\":2316:2326   */\n      0x4e487b71\n        /* \"#utility.yul\":2311:2314   */\n      0xe0\n        /* \"#utility.yul\":2307:2327   */\n      shl\n        /* \"#utility.yul\":2304:2305   */\n      0x00\n        /* \"#utility.yul\":2297:2328   */\n      mstore\n        /* \"#utility.yul\":2351:2355   */\n      0x12\n        /* \"#utility.yul\":2348:2349   */\n      0x04\n        /* \"#utility.yul\":2341:2356   */\n      mstore\n        /* \"#utility.yul\":2379:2383   */\n      0x24\n        /* \"#utility.yul\":2376:2377   */\n      0x00\n        /* \"#utility.yul\":2369:2384   */\n      revert\n        /* \"#utility.yul\":2262:2394   */\n    tag_121:\n      pop\n        /* \"#utility.yul\":2408:2417   */\n      div\n      swap1\n        /* \"#utility.yul\":2206:2423   */\n      jump\t// out\n        /* \"#utility.yul\":2428:2553   */\n    tag_61:\n        /* \"#utility.yul\":2493:2502   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":2514:2524   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":2511:2547   */\n      iszero\n      tag_86\n      jumpi\n        /* \"#utility.yul\":2527:2545   */\n      tag_86\n      tag_102\n      jump\t// in\n        /* \"#utility.yul\":2907:3035   */\n    tag_69:\n        /* \"#utility.yul\":2974:2983   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":2995:3006   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":2992:3029   */\n      iszero\n      tag_86\n      jumpi\n        /* \"#utility.yul\":3009:3027   */\n      tag_86\n      tag_102\n      jump\t// in\n\n    auxdata: 0xa26469706673582212207b133e49171d198cccd95862b80482f5b166e2fead1ed51f5f43450f1860a9cf64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_833": {
									"entryPoint": null,
									"id": 833,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 65,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 91,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:491:6",
										"nodeType": "YulBlock",
										"src": "0:491:6",
										"statements": [
											{
												"nativeSrc": "6:3:6",
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "74:117:6",
													"nodeType": "YulBlock",
													"src": "74:117:6",
													"statements": [
														{
															"nativeSrc": "84:22:6",
															"nodeType": "YulAssignment",
															"src": "84:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "99:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "93:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:6"
																},
																"nativeSrc": "93:13:6",
																"nodeType": "YulFunctionCall",
																"src": "93:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "84:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "169:16:6",
																"nodeType": "YulBlock",
																"src": "169:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "178:1:6",
																					"nodeType": "YulLiteral",
																					"src": "178:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "181:1:6",
																					"nodeType": "YulLiteral",
																					"src": "181:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "171:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:6"
																			},
																			"nativeSrc": "171:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:6"
																		},
																		"nativeSrc": "171:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "128:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "139:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "154:3:6",
																										"nodeType": "YulLiteral",
																										"src": "154:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "159:1:6",
																										"nodeType": "YulLiteral",
																										"src": "159:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "150:3:6",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:6"
																								},
																								"nativeSrc": "150:11:6",
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:6"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "163:1:6",
																								"nodeType": "YulLiteral",
																								"src": "163:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "146:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:6"
																						},
																						"nativeSrc": "146:19:6",
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "135:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:6"
																				},
																				"nativeSrc": "135:31:6",
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "125:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:6"
																		},
																		"nativeSrc": "125:42:6",
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "118:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:6"
																},
																"nativeSrc": "118:50:6",
																"nodeType": "YulFunctionCall",
																"src": "118:50:6"
															},
															"nativeSrc": "115:70:6",
															"nodeType": "YulIf",
															"src": "115:70:6"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nativeSrc": "14:177:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "53:6:6",
														"nodeType": "YulTypedName",
														"src": "53:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "64:5:6",
														"nodeType": "YulTypedName",
														"src": "64:5:6",
														"type": ""
													}
												],
												"src": "14:177:6"
											},
											{
												"body": {
													"nativeSrc": "294:195:6",
													"nodeType": "YulBlock",
													"src": "294:195:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "340:16:6",
																"nodeType": "YulBlock",
																"src": "340:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "349:1:6",
																					"nodeType": "YulLiteral",
																					"src": "349:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "352:1:6",
																					"nodeType": "YulLiteral",
																					"src": "352:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "342:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "342:6:6"
																			},
																			"nativeSrc": "342:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "342:12:6"
																		},
																		"nativeSrc": "342:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "342:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "315:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "315:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "324:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "324:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "311:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "311:3:6"
																		},
																		"nativeSrc": "311:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "311:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "336:2:6",
																		"nodeType": "YulLiteral",
																		"src": "336:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "307:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "307:3:6"
																},
																"nativeSrc": "307:32:6",
																"nodeType": "YulFunctionCall",
																"src": "307:32:6"
															},
															"nativeSrc": "304:52:6",
															"nodeType": "YulIf",
															"src": "304:52:6"
														},
														{
															"nativeSrc": "365:50:6",
															"nodeType": "YulAssignment",
															"src": "365:50:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "405:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "405:9:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "375:29:6",
																	"nodeType": "YulIdentifier",
																	"src": "375:29:6"
																},
																"nativeSrc": "375:40:6",
																"nodeType": "YulFunctionCall",
																"src": "375:40:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "365:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "365:6:6"
																}
															]
														},
														{
															"nativeSrc": "424:59:6",
															"nodeType": "YulAssignment",
															"src": "424:59:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "468:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "468:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "479:2:6",
																				"nodeType": "YulLiteral",
																				"src": "479:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "464:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "464:3:6"
																		},
																		"nativeSrc": "464:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "464:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nativeSrc": "434:29:6",
																	"nodeType": "YulIdentifier",
																	"src": "434:29:6"
																},
																"nativeSrc": "434:49:6",
																"nodeType": "YulFunctionCall",
																"src": "434:49:6"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "424:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "424:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nativeSrc": "196:293:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "252:9:6",
														"nodeType": "YulTypedName",
														"src": "252:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "263:7:6",
														"nodeType": "YulTypedName",
														"src": "263:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "275:6:6",
														"nodeType": "YulTypedName",
														"src": "275:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "283:6:6",
														"nodeType": "YulTypedName",
														"src": "283:6:6",
														"type": ""
													}
												],
												"src": "196:293:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c0604052348015600e575f80fd5b506040516107d13803806107d1833981016040819052602b91605b565b6001600160a01b039182166080521660a0526087565b80516001600160a01b03811681146056575f80fd5b919050565b5f8060408385031215606b575f80fd5b6072836041565b9150607e602084016041565b90509250929050565b60805160a05161070d6100c45f395f8181610169015281816101fa015261042601525f818161011701528181610359015261052f015261070d5ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80635a230162116100635780635a230162146100e057806370a08231146100f357806372f702f314610112578063a694fc3a14610151578063f7c618c114610164575f80fd5b80630dcc4b441461009457806318160ddd146100a95780632e17de78146100c55780634e71d92d146100d8575b5f80fd5b6100a76100a236600461060b565b61018b565b005b6100b260015481565b6040519081526020015b60405180910390f35b6100a76100d336600461060b565b6102a4565b6100b26103d0565b6100b26100ee366004610622565b610497565b6100b2610101366004610622565b5f6020819052908152604090205481565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100bc565b6100a761015f36600461060b565b6104c9565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b5f600154116101d85760405162461bcd60e51b8152602060048201526014602482015273546f74616c20737570706c79206973207a65726f60601b60448201526064015b60405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015610248573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026c9190610648565b50600154610282670de0b6b3a76400008361067b565b61028c9190610692565b60025f82825461029c91906106b1565b909155505050565b335f908152602081905260409020548111156102f95760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016101cf565b61030233610566565b335f90815260208190526040812080548392906103209084906106c4565b925050819055508060015f82825461033891906106c4565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044015b6020604051808303815f875af11580156103a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cc9190610648565b5050565b5f6103da33610566565b335f90815260036020526040902054801561049257335f81815260036020526040808220919091555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af115801561046c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104909190610648565b505b919050565b5f6104a1826105b9565b6001600160a01b0383165f908152600360205260409020546104c391906106b1565b92915050565b6104d233610566565b335f90815260208190526040812080548392906104f09084906106b1565b925050819055508060015f82825461050891906106b1565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd9060640161038c565b61056f816105b9565b6001600160a01b0382165f90815260036020526040812080549091906105969084906106b1565b90915550506002546001600160a01b039091165f90815260046020526040902055565b6001600160a01b0381165f90815260208181526040808320546004909252822054600254670de0b6b3a7640000916105f0916106c4565b6105fa908361067b565b6106049190610692565b9392505050565b5f6020828403121561061b575f80fd5b5035919050565b5f60208284031215610632575f80fd5b81356001600160a01b0381168114610604575f80fd5b5f60208284031215610658575f80fd5b81518015158114610604575f80fd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176104c3576104c3610667565b5f826106ac57634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156104c3576104c3610667565b818103818111156104c3576104c361066756fea26469706673582212207b133e49171d198cccd95862b80482f5b166e2fead1ed51f5f43450f1860a9cf64736f6c634300081a0033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7D1 CODESIZE SUB DUP1 PUSH2 0x7D1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH1 0x2B SWAP2 PUSH1 0x5B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 MSTORE AND PUSH1 0xA0 MSTORE PUSH1 0x87 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH1 0x56 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x6B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x72 DUP4 PUSH1 0x41 JUMP JUMPDEST SWAP2 POP PUSH1 0x7E PUSH1 0x20 DUP5 ADD PUSH1 0x41 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x70D PUSH2 0xC4 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x169 ADD MSTORE DUP2 DUP2 PUSH2 0x1FA ADD MSTORE PUSH2 0x426 ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x117 ADD MSTORE DUP2 DUP2 PUSH2 0x359 ADD MSTORE PUSH2 0x52F ADD MSTORE PUSH2 0x70D PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x90 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5A230162 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x5A230162 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x164 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDCC4B44 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0xD8 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB2 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0xD3 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0xB2 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x622 JUMP JUMPDEST PUSH2 0x497 JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x622 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x139 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBC JUMP JUMPDEST PUSH2 0xA7 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x4C9 JUMP JUMPDEST PUSH2 0x139 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 SLOAD GT PUSH2 0x1D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x546F74616C20737570706C79206973207A65726F PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x248 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x282 PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x67B JUMP JUMPDEST PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x692 JUMP JUMPDEST PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1CF JUMP JUMPDEST PUSH2 0x302 CALLER PUSH2 0x566 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x320 SWAP1 DUP5 SWAP1 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x6C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A8 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CC SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x3DA CALLER PUSH2 0x566 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x492 JUMPI CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x490 SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4A1 DUP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4D2 CALLER PUSH2 0x566 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x4F0 SWAP1 DUP5 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH2 0x38C JUMP JUMPDEST PUSH2 0x56F DUP2 PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x596 SWAP1 DUP5 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH1 0x2 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x5F0 SWAP2 PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x5FA SWAP1 DUP4 PUSH2 0x67B JUMP JUMPDEST PUSH2 0x604 SWAP2 SWAP1 PUSH2 0x692 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x61B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x632 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x604 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x658 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x604 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x667 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x6AC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x667 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x667 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x133E49171D198CCCD95862B80482F5B166E2FEAD1ED51F5F43450F18 PUSH1 0xA9 0xCF PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "119:3570:5:-:0;;;861:157;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;929:36:5;;;;;976:34;;;119:3570;;14:177:6;93:13;;-1:-1:-1;;;;;135:31:6;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;119:3570:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateRewards_895": {
									"entryPoint": 1465,
									"id": 895,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_updateRewards_933": {
									"entryPoint": 1382,
									"id": 933,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@balanceOf_798": {
									"entryPoint": null,
									"id": 798,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@calculateRewardEarned_912": {
									"entryPoint": 1175,
									"id": 912,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@claim_1050": {
									"entryPoint": 976,
									"id": 1050,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@rewardToken_794": {
									"entryPoint": null,
									"id": 794,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stake_968": {
									"entryPoint": 1225,
									"id": 968,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@stakingToken_791": {
									"entryPoint": null,
									"id": 791,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalSupply_800": {
									"entryPoint": null,
									"id": 800,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@unstake_1009": {
									"entryPoint": 676,
									"id": 1009,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@updateRewardIndex_868": {
									"entryPoint": 395,
									"id": 868,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1570,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 1608,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 1547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$729__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_5abc40a724a85ea2ea76b4fa1aa78ad5521549a2c0f7a2342461f22350a5c27b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1713,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 1682,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1659,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1732,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1639,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:3316:6",
										"nodeType": "YulBlock",
										"src": "0:3316:6",
										"statements": [
											{
												"nativeSrc": "6:3:6",
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "84:110:6",
													"nodeType": "YulBlock",
													"src": "84:110:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "130:16:6",
																"nodeType": "YulBlock",
																"src": "130:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "139:1:6",
																					"nodeType": "YulLiteral",
																					"src": "139:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "142:1:6",
																					"nodeType": "YulLiteral",
																					"src": "142:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "132:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:6"
																			},
																			"nativeSrc": "132:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:6"
																		},
																		"nativeSrc": "132:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "105:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "114:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "101:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:6"
																		},
																		"nativeSrc": "101:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "126:2:6",
																		"nodeType": "YulLiteral",
																		"src": "126:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "97:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:6"
																},
																"nativeSrc": "97:32:6",
																"nodeType": "YulFunctionCall",
																"src": "97:32:6"
															},
															"nativeSrc": "94:52:6",
															"nodeType": "YulIf",
															"src": "94:52:6"
														},
														{
															"nativeSrc": "155:33:6",
															"nodeType": "YulAssignment",
															"src": "155:33:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "178:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "165:12:6",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:6"
																},
																"nativeSrc": "165:23:6",
																"nodeType": "YulFunctionCall",
																"src": "165:23:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "155:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "14:180:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "50:9:6",
														"nodeType": "YulTypedName",
														"src": "50:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "61:7:6",
														"nodeType": "YulTypedName",
														"src": "61:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "73:6:6",
														"nodeType": "YulTypedName",
														"src": "73:6:6",
														"type": ""
													}
												],
												"src": "14:180:6"
											},
											{
												"body": {
													"nativeSrc": "300:76:6",
													"nodeType": "YulBlock",
													"src": "300:76:6",
													"statements": [
														{
															"nativeSrc": "310:26:6",
															"nodeType": "YulAssignment",
															"src": "310:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "322:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "322:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "333:2:6",
																		"nodeType": "YulLiteral",
																		"src": "333:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "318:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "318:3:6"
																},
																"nativeSrc": "318:18:6",
																"nodeType": "YulFunctionCall",
																"src": "318:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "310:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "310:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "352:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "352:9:6"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "363:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "363:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "345:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:6"
																},
																"nativeSrc": "345:25:6",
																"nodeType": "YulFunctionCall",
																"src": "345:25:6"
															},
															"nativeSrc": "345:25:6",
															"nodeType": "YulExpressionStatement",
															"src": "345:25:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "199:177:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "269:9:6",
														"nodeType": "YulTypedName",
														"src": "269:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "280:6:6",
														"nodeType": "YulTypedName",
														"src": "280:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "291:4:6",
														"nodeType": "YulTypedName",
														"src": "291:4:6",
														"type": ""
													}
												],
												"src": "199:177:6"
											},
											{
												"body": {
													"nativeSrc": "451:216:6",
													"nodeType": "YulBlock",
													"src": "451:216:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "497:16:6",
																"nodeType": "YulBlock",
																"src": "497:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "506:1:6",
																					"nodeType": "YulLiteral",
																					"src": "506:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "509:1:6",
																					"nodeType": "YulLiteral",
																					"src": "509:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "499:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "499:6:6"
																			},
																			"nativeSrc": "499:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "499:12:6"
																		},
																		"nativeSrc": "499:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "499:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "472:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "472:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "481:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "481:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "468:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "468:3:6"
																		},
																		"nativeSrc": "468:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "468:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "493:2:6",
																		"nodeType": "YulLiteral",
																		"src": "493:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "464:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "464:3:6"
																},
																"nativeSrc": "464:32:6",
																"nodeType": "YulFunctionCall",
																"src": "464:32:6"
															},
															"nativeSrc": "461:52:6",
															"nodeType": "YulIf",
															"src": "461:52:6"
														},
														{
															"nativeSrc": "522:36:6",
															"nodeType": "YulVariableDeclaration",
															"src": "522:36:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "548:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "548:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "535:12:6",
																	"nodeType": "YulIdentifier",
																	"src": "535:12:6"
																},
																"nativeSrc": "535:23:6",
																"nodeType": "YulFunctionCall",
																"src": "535:23:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "526:5:6",
																	"nodeType": "YulTypedName",
																	"src": "526:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "621:16:6",
																"nodeType": "YulBlock",
																"src": "621:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "630:1:6",
																					"nodeType": "YulLiteral",
																					"src": "630:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "633:1:6",
																					"nodeType": "YulLiteral",
																					"src": "633:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "623:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "623:6:6"
																			},
																			"nativeSrc": "623:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "623:12:6"
																		},
																		"nativeSrc": "623:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "623:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "580:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "580:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "591:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "591:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "606:3:6",
																										"nodeType": "YulLiteral",
																										"src": "606:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "611:1:6",
																										"nodeType": "YulLiteral",
																										"src": "611:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "602:3:6",
																									"nodeType": "YulIdentifier",
																									"src": "602:3:6"
																								},
																								"nativeSrc": "602:11:6",
																								"nodeType": "YulFunctionCall",
																								"src": "602:11:6"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "615:1:6",
																								"nodeType": "YulLiteral",
																								"src": "615:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "598:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "598:3:6"
																						},
																						"nativeSrc": "598:19:6",
																						"nodeType": "YulFunctionCall",
																						"src": "598:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "587:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "587:3:6"
																				},
																				"nativeSrc": "587:31:6",
																				"nodeType": "YulFunctionCall",
																				"src": "587:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "577:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "577:2:6"
																		},
																		"nativeSrc": "577:42:6",
																		"nodeType": "YulFunctionCall",
																		"src": "577:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "570:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "570:6:6"
																},
																"nativeSrc": "570:50:6",
																"nodeType": "YulFunctionCall",
																"src": "570:50:6"
															},
															"nativeSrc": "567:70:6",
															"nodeType": "YulIf",
															"src": "567:70:6"
														},
														{
															"nativeSrc": "646:15:6",
															"nodeType": "YulAssignment",
															"src": "646:15:6",
															"value": {
																"name": "value",
																"nativeSrc": "656:5:6",
																"nodeType": "YulIdentifier",
																"src": "656:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "646:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "646:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "381:286:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "417:9:6",
														"nodeType": "YulTypedName",
														"src": "417:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "428:7:6",
														"nodeType": "YulTypedName",
														"src": "428:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "440:6:6",
														"nodeType": "YulTypedName",
														"src": "440:6:6",
														"type": ""
													}
												],
												"src": "381:286:6"
											},
											{
												"body": {
													"nativeSrc": "787:102:6",
													"nodeType": "YulBlock",
													"src": "787:102:6",
													"statements": [
														{
															"nativeSrc": "797:26:6",
															"nodeType": "YulAssignment",
															"src": "797:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "809:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "809:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "820:2:6",
																		"nodeType": "YulLiteral",
																		"src": "820:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "805:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "805:3:6"
																},
																"nativeSrc": "805:18:6",
																"nodeType": "YulFunctionCall",
																"src": "805:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "797:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "797:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "839:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "839:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "854:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "854:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "870:3:6",
																								"nodeType": "YulLiteral",
																								"src": "870:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "875:1:6",
																								"nodeType": "YulLiteral",
																								"src": "875:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "866:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "866:3:6"
																						},
																						"nativeSrc": "866:11:6",
																						"nodeType": "YulFunctionCall",
																						"src": "866:11:6"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "879:1:6",
																						"nodeType": "YulLiteral",
																						"src": "879:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "862:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "862:3:6"
																				},
																				"nativeSrc": "862:19:6",
																				"nodeType": "YulFunctionCall",
																				"src": "862:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "850:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "850:3:6"
																		},
																		"nativeSrc": "850:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "850:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "832:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "832:6:6"
																},
																"nativeSrc": "832:51:6",
																"nodeType": "YulFunctionCall",
																"src": "832:51:6"
															},
															"nativeSrc": "832:51:6",
															"nodeType": "YulExpressionStatement",
															"src": "832:51:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$729__to_t_address__fromStack_reversed",
												"nativeSrc": "672:217:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "756:9:6",
														"nodeType": "YulTypedName",
														"src": "756:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "767:6:6",
														"nodeType": "YulTypedName",
														"src": "767:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "778:4:6",
														"nodeType": "YulTypedName",
														"src": "778:4:6",
														"type": ""
													}
												],
												"src": "672:217:6"
											},
											{
												"body": {
													"nativeSrc": "1068:170:6",
													"nodeType": "YulBlock",
													"src": "1068:170:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1085:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1085:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1096:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1096:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1078:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1078:6:6"
																},
																"nativeSrc": "1078:21:6",
																"nodeType": "YulFunctionCall",
																"src": "1078:21:6"
															},
															"nativeSrc": "1078:21:6",
															"nodeType": "YulExpressionStatement",
															"src": "1078:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1119:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1119:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1130:2:6",
																				"nodeType": "YulLiteral",
																				"src": "1130:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1115:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:6"
																		},
																		"nativeSrc": "1115:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1115:18:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1135:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1135:2:6",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1108:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1108:6:6"
																},
																"nativeSrc": "1108:30:6",
																"nodeType": "YulFunctionCall",
																"src": "1108:30:6"
															},
															"nativeSrc": "1108:30:6",
															"nodeType": "YulExpressionStatement",
															"src": "1108:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1158:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1158:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1169:2:6",
																				"nodeType": "YulLiteral",
																				"src": "1169:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1154:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1154:3:6"
																		},
																		"nativeSrc": "1154:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1154:18:6"
																	},
																	{
																		"hexValue": "546f74616c20737570706c79206973207a65726f",
																		"kind": "string",
																		"nativeSrc": "1174:22:6",
																		"nodeType": "YulLiteral",
																		"src": "1174:22:6",
																		"type": "",
																		"value": "Total supply is zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1147:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1147:6:6"
																},
																"nativeSrc": "1147:50:6",
																"nodeType": "YulFunctionCall",
																"src": "1147:50:6"
															},
															"nativeSrc": "1147:50:6",
															"nodeType": "YulExpressionStatement",
															"src": "1147:50:6"
														},
														{
															"nativeSrc": "1206:26:6",
															"nodeType": "YulAssignment",
															"src": "1206:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1218:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1218:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1229:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1229:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1214:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1214:3:6"
																},
																"nativeSrc": "1214:18:6",
																"nodeType": "YulFunctionCall",
																"src": "1214:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1206:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "1206:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5abc40a724a85ea2ea76b4fa1aa78ad5521549a2c0f7a2342461f22350a5c27b__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "894:344:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1045:9:6",
														"nodeType": "YulTypedName",
														"src": "1045:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1059:4:6",
														"nodeType": "YulTypedName",
														"src": "1059:4:6",
														"type": ""
													}
												],
												"src": "894:344:6"
											},
											{
												"body": {
													"nativeSrc": "1400:214:6",
													"nodeType": "YulBlock",
													"src": "1400:214:6",
													"statements": [
														{
															"nativeSrc": "1410:26:6",
															"nodeType": "YulAssignment",
															"src": "1410:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1422:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1422:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1433:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1433:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1418:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1418:3:6"
																},
																"nativeSrc": "1418:18:6",
																"nodeType": "YulFunctionCall",
																"src": "1418:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1410:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "1410:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1452:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1452:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1467:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "1467:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1483:3:6",
																								"nodeType": "YulLiteral",
																								"src": "1483:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1488:1:6",
																								"nodeType": "YulLiteral",
																								"src": "1488:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1479:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "1479:3:6"
																						},
																						"nativeSrc": "1479:11:6",
																						"nodeType": "YulFunctionCall",
																						"src": "1479:11:6"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1492:1:6",
																						"nodeType": "YulLiteral",
																						"src": "1492:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1475:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "1475:3:6"
																				},
																				"nativeSrc": "1475:19:6",
																				"nodeType": "YulFunctionCall",
																				"src": "1475:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1463:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1463:3:6"
																		},
																		"nativeSrc": "1463:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1463:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1445:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1445:6:6"
																},
																"nativeSrc": "1445:51:6",
																"nodeType": "YulFunctionCall",
																"src": "1445:51:6"
															},
															"nativeSrc": "1445:51:6",
															"nodeType": "YulExpressionStatement",
															"src": "1445:51:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1516:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1516:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1527:2:6",
																				"nodeType": "YulLiteral",
																				"src": "1527:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1512:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1512:3:6"
																		},
																		"nativeSrc": "1512:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1512:18:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "1536:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "1536:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1552:3:6",
																								"nodeType": "YulLiteral",
																								"src": "1552:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1557:1:6",
																								"nodeType": "YulLiteral",
																								"src": "1557:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1548:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "1548:3:6"
																						},
																						"nativeSrc": "1548:11:6",
																						"nodeType": "YulFunctionCall",
																						"src": "1548:11:6"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1561:1:6",
																						"nodeType": "YulLiteral",
																						"src": "1561:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1544:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "1544:3:6"
																				},
																				"nativeSrc": "1544:19:6",
																				"nodeType": "YulFunctionCall",
																				"src": "1544:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1532:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1532:3:6"
																		},
																		"nativeSrc": "1532:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1532:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1505:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1505:6:6"
																},
																"nativeSrc": "1505:60:6",
																"nodeType": "YulFunctionCall",
																"src": "1505:60:6"
															},
															"nativeSrc": "1505:60:6",
															"nodeType": "YulExpressionStatement",
															"src": "1505:60:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1585:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1585:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1596:2:6",
																				"nodeType": "YulLiteral",
																				"src": "1596:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1581:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1581:3:6"
																		},
																		"nativeSrc": "1581:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1581:18:6"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "1601:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "1601:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1574:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1574:6:6"
																},
																"nativeSrc": "1574:34:6",
																"nodeType": "YulFunctionCall",
																"src": "1574:34:6"
															},
															"nativeSrc": "1574:34:6",
															"nodeType": "YulExpressionStatement",
															"src": "1574:34:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "1243:371:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1353:9:6",
														"nodeType": "YulTypedName",
														"src": "1353:9:6",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1364:6:6",
														"nodeType": "YulTypedName",
														"src": "1364:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1372:6:6",
														"nodeType": "YulTypedName",
														"src": "1372:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1380:6:6",
														"nodeType": "YulTypedName",
														"src": "1380:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1391:4:6",
														"nodeType": "YulTypedName",
														"src": "1391:4:6",
														"type": ""
													}
												],
												"src": "1243:371:6"
											},
											{
												"body": {
													"nativeSrc": "1697:199:6",
													"nodeType": "YulBlock",
													"src": "1697:199:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "1743:16:6",
																"nodeType": "YulBlock",
																"src": "1743:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1752:1:6",
																					"nodeType": "YulLiteral",
																					"src": "1752:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1755:1:6",
																					"nodeType": "YulLiteral",
																					"src": "1755:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1745:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "1745:6:6"
																			},
																			"nativeSrc": "1745:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "1745:12:6"
																		},
																		"nativeSrc": "1745:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "1745:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1718:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "1718:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1727:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1727:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1714:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1714:3:6"
																		},
																		"nativeSrc": "1714:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1714:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1739:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1739:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1710:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1710:3:6"
																},
																"nativeSrc": "1710:32:6",
																"nodeType": "YulFunctionCall",
																"src": "1710:32:6"
															},
															"nativeSrc": "1707:52:6",
															"nodeType": "YulIf",
															"src": "1707:52:6"
														},
														{
															"nativeSrc": "1768:29:6",
															"nodeType": "YulVariableDeclaration",
															"src": "1768:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1787:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1787:9:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1781:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "1781:5:6"
																},
																"nativeSrc": "1781:16:6",
																"nodeType": "YulFunctionCall",
																"src": "1781:16:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1772:5:6",
																	"nodeType": "YulTypedName",
																	"src": "1772:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1850:16:6",
																"nodeType": "YulBlock",
																"src": "1850:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1859:1:6",
																					"nodeType": "YulLiteral",
																					"src": "1859:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1862:1:6",
																					"nodeType": "YulLiteral",
																					"src": "1862:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1852:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "1852:6:6"
																			},
																			"nativeSrc": "1852:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "1852:12:6"
																		},
																		"nativeSrc": "1852:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "1852:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1819:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "1819:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nativeSrc": "1840:5:6",
																								"nodeType": "YulIdentifier",
																								"src": "1840:5:6"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nativeSrc": "1833:6:6",
																							"nodeType": "YulIdentifier",
																							"src": "1833:6:6"
																						},
																						"nativeSrc": "1833:13:6",
																						"nodeType": "YulFunctionCall",
																						"src": "1833:13:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1826:6:6",
																					"nodeType": "YulIdentifier",
																					"src": "1826:6:6"
																				},
																				"nativeSrc": "1826:21:6",
																				"nodeType": "YulFunctionCall",
																				"src": "1826:21:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1816:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "1816:2:6"
																		},
																		"nativeSrc": "1816:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1816:32:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1809:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1809:6:6"
																},
																"nativeSrc": "1809:40:6",
																"nodeType": "YulFunctionCall",
																"src": "1809:40:6"
															},
															"nativeSrc": "1806:60:6",
															"nodeType": "YulIf",
															"src": "1806:60:6"
														},
														{
															"nativeSrc": "1875:15:6",
															"nodeType": "YulAssignment",
															"src": "1875:15:6",
															"value": {
																"name": "value",
																"nativeSrc": "1885:5:6",
																"nodeType": "YulIdentifier",
																"src": "1885:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1875:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1875:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "1619:277:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1663:9:6",
														"nodeType": "YulTypedName",
														"src": "1663:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1674:7:6",
														"nodeType": "YulTypedName",
														"src": "1674:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1686:6:6",
														"nodeType": "YulTypedName",
														"src": "1686:6:6",
														"type": ""
													}
												],
												"src": "1619:277:6"
											},
											{
												"body": {
													"nativeSrc": "1933:95:6",
													"nodeType": "YulBlock",
													"src": "1933:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1950:1:6",
																		"nodeType": "YulLiteral",
																		"src": "1950:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1957:3:6",
																				"nodeType": "YulLiteral",
																				"src": "1957:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1962:10:6",
																				"nodeType": "YulLiteral",
																				"src": "1962:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1953:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1953:3:6"
																		},
																		"nativeSrc": "1953:20:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1953:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1943:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1943:6:6"
																},
																"nativeSrc": "1943:31:6",
																"nodeType": "YulFunctionCall",
																"src": "1943:31:6"
															},
															"nativeSrc": "1943:31:6",
															"nodeType": "YulExpressionStatement",
															"src": "1943:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1990:1:6",
																		"nodeType": "YulLiteral",
																		"src": "1990:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1993:4:6",
																		"nodeType": "YulLiteral",
																		"src": "1993:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1983:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1983:6:6"
																},
																"nativeSrc": "1983:15:6",
																"nodeType": "YulFunctionCall",
																"src": "1983:15:6"
															},
															"nativeSrc": "1983:15:6",
															"nodeType": "YulExpressionStatement",
															"src": "1983:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2014:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2014:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2017:4:6",
																		"nodeType": "YulLiteral",
																		"src": "2017:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2007:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2007:6:6"
																},
																"nativeSrc": "2007:15:6",
																"nodeType": "YulFunctionCall",
																"src": "2007:15:6"
															},
															"nativeSrc": "2007:15:6",
															"nodeType": "YulExpressionStatement",
															"src": "2007:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "1901:127:6",
												"nodeType": "YulFunctionDefinition",
												"src": "1901:127:6"
											},
											{
												"body": {
													"nativeSrc": "2085:116:6",
													"nodeType": "YulBlock",
													"src": "2085:116:6",
													"statements": [
														{
															"nativeSrc": "2095:20:6",
															"nodeType": "YulAssignment",
															"src": "2095:20:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2110:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2110:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2113:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2113:1:6"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "2106:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2106:3:6"
																},
																"nativeSrc": "2106:9:6",
																"nodeType": "YulFunctionCall",
																"src": "2106:9:6"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "2095:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "2095:7:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2173:22:6",
																"nodeType": "YulBlock",
																"src": "2173:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "2175:16:6",
																				"nodeType": "YulIdentifier",
																				"src": "2175:16:6"
																			},
																			"nativeSrc": "2175:18:6",
																			"nodeType": "YulFunctionCall",
																			"src": "2175:18:6"
																		},
																		"nativeSrc": "2175:18:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "2175:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "2144:1:6",
																						"nodeType": "YulIdentifier",
																						"src": "2144:1:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "2137:6:6",
																					"nodeType": "YulIdentifier",
																					"src": "2137:6:6"
																				},
																				"nativeSrc": "2137:9:6",
																				"nodeType": "YulFunctionCall",
																				"src": "2137:9:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "2151:1:6",
																						"nodeType": "YulIdentifier",
																						"src": "2151:1:6"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "2158:7:6",
																								"nodeType": "YulIdentifier",
																								"src": "2158:7:6"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "2167:1:6",
																								"nodeType": "YulIdentifier",
																								"src": "2167:1:6"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "2154:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "2154:3:6"
																						},
																						"nativeSrc": "2154:15:6",
																						"nodeType": "YulFunctionCall",
																						"src": "2154:15:6"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "2148:2:6",
																					"nodeType": "YulIdentifier",
																					"src": "2148:2:6"
																				},
																				"nativeSrc": "2148:22:6",
																				"nodeType": "YulFunctionCall",
																				"src": "2148:22:6"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "2134:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "2134:2:6"
																		},
																		"nativeSrc": "2134:37:6",
																		"nodeType": "YulFunctionCall",
																		"src": "2134:37:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2127:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2127:6:6"
																},
																"nativeSrc": "2127:45:6",
																"nodeType": "YulFunctionCall",
																"src": "2127:45:6"
															},
															"nativeSrc": "2124:71:6",
															"nodeType": "YulIf",
															"src": "2124:71:6"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "2033:168:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2064:1:6",
														"nodeType": "YulTypedName",
														"src": "2064:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2067:1:6",
														"nodeType": "YulTypedName",
														"src": "2067:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "2073:7:6",
														"nodeType": "YulTypedName",
														"src": "2073:7:6",
														"type": ""
													}
												],
												"src": "2033:168:6"
											},
											{
												"body": {
													"nativeSrc": "2252:171:6",
													"nodeType": "YulBlock",
													"src": "2252:171:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "2283:111:6",
																"nodeType": "YulBlock",
																"src": "2283:111:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2304:1:6",
																					"nodeType": "YulLiteral",
																					"src": "2304:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2311:3:6",
																							"nodeType": "YulLiteral",
																							"src": "2311:3:6",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2316:10:6",
																							"nodeType": "YulLiteral",
																							"src": "2316:10:6",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "2307:3:6",
																						"nodeType": "YulIdentifier",
																						"src": "2307:3:6"
																					},
																					"nativeSrc": "2307:20:6",
																					"nodeType": "YulFunctionCall",
																					"src": "2307:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2297:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "2297:6:6"
																			},
																			"nativeSrc": "2297:31:6",
																			"nodeType": "YulFunctionCall",
																			"src": "2297:31:6"
																		},
																		"nativeSrc": "2297:31:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "2297:31:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2348:1:6",
																					"nodeType": "YulLiteral",
																					"src": "2348:1:6",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2351:4:6",
																					"nodeType": "YulLiteral",
																					"src": "2351:4:6",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2341:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "2341:6:6"
																			},
																			"nativeSrc": "2341:15:6",
																			"nodeType": "YulFunctionCall",
																			"src": "2341:15:6"
																		},
																		"nativeSrc": "2341:15:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "2341:15:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2376:1:6",
																					"nodeType": "YulLiteral",
																					"src": "2376:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2379:4:6",
																					"nodeType": "YulLiteral",
																					"src": "2379:4:6",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2369:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "2369:6:6"
																			},
																			"nativeSrc": "2369:15:6",
																			"nodeType": "YulFunctionCall",
																			"src": "2369:15:6"
																		},
																		"nativeSrc": "2369:15:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "2369:15:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "2272:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2272:1:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2265:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2265:6:6"
																},
																"nativeSrc": "2265:9:6",
																"nodeType": "YulFunctionCall",
																"src": "2265:9:6"
															},
															"nativeSrc": "2262:132:6",
															"nodeType": "YulIf",
															"src": "2262:132:6"
														},
														{
															"nativeSrc": "2403:14:6",
															"nodeType": "YulAssignment",
															"src": "2403:14:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2412:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2412:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2415:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2415:1:6"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2408:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2408:3:6"
																},
																"nativeSrc": "2408:9:6",
																"nodeType": "YulFunctionCall",
																"src": "2408:9:6"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "2403:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "2403:1:6"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "2206:217:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2237:1:6",
														"nodeType": "YulTypedName",
														"src": "2237:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2240:1:6",
														"nodeType": "YulTypedName",
														"src": "2240:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "2246:1:6",
														"nodeType": "YulTypedName",
														"src": "2246:1:6",
														"type": ""
													}
												],
												"src": "2206:217:6"
											},
											{
												"body": {
													"nativeSrc": "2476:77:6",
													"nodeType": "YulBlock",
													"src": "2476:77:6",
													"statements": [
														{
															"nativeSrc": "2486:16:6",
															"nodeType": "YulAssignment",
															"src": "2486:16:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2497:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2497:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2500:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2500:1:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2493:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2493:3:6"
																},
																"nativeSrc": "2493:9:6",
																"nodeType": "YulFunctionCall",
																"src": "2493:9:6"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "2486:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2486:3:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2525:22:6",
																"nodeType": "YulBlock",
																"src": "2525:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "2527:16:6",
																				"nodeType": "YulIdentifier",
																				"src": "2527:16:6"
																			},
																			"nativeSrc": "2527:18:6",
																			"nodeType": "YulFunctionCall",
																			"src": "2527:18:6"
																		},
																		"nativeSrc": "2527:18:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "2527:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2517:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2517:1:6"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "2520:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "2520:3:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2514:2:6",
																	"nodeType": "YulIdentifier",
																	"src": "2514:2:6"
																},
																"nativeSrc": "2514:10:6",
																"nodeType": "YulFunctionCall",
																"src": "2514:10:6"
															},
															"nativeSrc": "2511:36:6",
															"nodeType": "YulIf",
															"src": "2511:36:6"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "2428:125:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2459:1:6",
														"nodeType": "YulTypedName",
														"src": "2459:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2462:1:6",
														"nodeType": "YulTypedName",
														"src": "2462:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "2468:3:6",
														"nodeType": "YulTypedName",
														"src": "2468:3:6",
														"type": ""
													}
												],
												"src": "2428:125:6"
											},
											{
												"body": {
													"nativeSrc": "2732:170:6",
													"nodeType": "YulBlock",
													"src": "2732:170:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2749:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "2749:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2760:2:6",
																		"nodeType": "YulLiteral",
																		"src": "2760:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2742:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2742:6:6"
																},
																"nativeSrc": "2742:21:6",
																"nodeType": "YulFunctionCall",
																"src": "2742:21:6"
															},
															"nativeSrc": "2742:21:6",
															"nodeType": "YulExpressionStatement",
															"src": "2742:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2783:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "2783:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2794:2:6",
																				"nodeType": "YulLiteral",
																				"src": "2794:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2779:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "2779:3:6"
																		},
																		"nativeSrc": "2779:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "2779:18:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2799:2:6",
																		"nodeType": "YulLiteral",
																		"src": "2799:2:6",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2772:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2772:6:6"
																},
																"nativeSrc": "2772:30:6",
																"nodeType": "YulFunctionCall",
																"src": "2772:30:6"
															},
															"nativeSrc": "2772:30:6",
															"nodeType": "YulExpressionStatement",
															"src": "2772:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2822:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "2822:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2833:2:6",
																				"nodeType": "YulLiteral",
																				"src": "2833:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2818:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "2818:3:6"
																		},
																		"nativeSrc": "2818:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "2818:18:6"
																	},
																	{
																		"hexValue": "496e73756666696369656e742062616c616e6365",
																		"kind": "string",
																		"nativeSrc": "2838:22:6",
																		"nodeType": "YulLiteral",
																		"src": "2838:22:6",
																		"type": "",
																		"value": "Insufficient balance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2811:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2811:6:6"
																},
																"nativeSrc": "2811:50:6",
																"nodeType": "YulFunctionCall",
																"src": "2811:50:6"
															},
															"nativeSrc": "2811:50:6",
															"nodeType": "YulExpressionStatement",
															"src": "2811:50:6"
														},
														{
															"nativeSrc": "2870:26:6",
															"nodeType": "YulAssignment",
															"src": "2870:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2882:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "2882:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2893:2:6",
																		"nodeType": "YulLiteral",
																		"src": "2893:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2878:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2878:3:6"
																},
																"nativeSrc": "2878:18:6",
																"nodeType": "YulFunctionCall",
																"src": "2878:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2870:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "2870:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "2558:344:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2709:9:6",
														"nodeType": "YulTypedName",
														"src": "2709:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2723:4:6",
														"nodeType": "YulTypedName",
														"src": "2723:4:6",
														"type": ""
													}
												],
												"src": "2558:344:6"
											},
											{
												"body": {
													"nativeSrc": "2956:79:6",
													"nodeType": "YulBlock",
													"src": "2956:79:6",
													"statements": [
														{
															"nativeSrc": "2966:17:6",
															"nodeType": "YulAssignment",
															"src": "2966:17:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "2978:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2978:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "2981:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "2981:1:6"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "2974:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2974:3:6"
																},
																"nativeSrc": "2974:9:6",
																"nodeType": "YulFunctionCall",
																"src": "2974:9:6"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "2966:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "2966:4:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3007:22:6",
																"nodeType": "YulBlock",
																"src": "3007:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3009:16:6",
																				"nodeType": "YulIdentifier",
																				"src": "3009:16:6"
																			},
																			"nativeSrc": "3009:18:6",
																			"nodeType": "YulFunctionCall",
																			"src": "3009:18:6"
																		},
																		"nativeSrc": "3009:18:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "3009:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "2998:4:6",
																		"nodeType": "YulIdentifier",
																		"src": "2998:4:6"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "3004:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2995:2:6",
																	"nodeType": "YulIdentifier",
																	"src": "2995:2:6"
																},
																"nativeSrc": "2995:11:6",
																"nodeType": "YulFunctionCall",
																"src": "2995:11:6"
															},
															"nativeSrc": "2992:37:6",
															"nodeType": "YulIf",
															"src": "2992:37:6"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "2907:128:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "2938:1:6",
														"nodeType": "YulTypedName",
														"src": "2938:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "2941:1:6",
														"nodeType": "YulTypedName",
														"src": "2941:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "2947:4:6",
														"nodeType": "YulTypedName",
														"src": "2947:4:6",
														"type": ""
													}
												],
												"src": "2907:128:6"
											},
											{
												"body": {
													"nativeSrc": "3169:145:6",
													"nodeType": "YulBlock",
													"src": "3169:145:6",
													"statements": [
														{
															"nativeSrc": "3179:26:6",
															"nodeType": "YulAssignment",
															"src": "3179:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3191:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "3191:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3202:2:6",
																		"nodeType": "YulLiteral",
																		"src": "3202:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3187:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "3187:3:6"
																},
																"nativeSrc": "3187:18:6",
																"nodeType": "YulFunctionCall",
																"src": "3187:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3179:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "3179:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3221:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "3221:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3236:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "3236:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3252:3:6",
																								"nodeType": "YulLiteral",
																								"src": "3252:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3257:1:6",
																								"nodeType": "YulLiteral",
																								"src": "3257:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3248:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "3248:3:6"
																						},
																						"nativeSrc": "3248:11:6",
																						"nodeType": "YulFunctionCall",
																						"src": "3248:11:6"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3261:1:6",
																						"nodeType": "YulLiteral",
																						"src": "3261:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3244:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "3244:3:6"
																				},
																				"nativeSrc": "3244:19:6",
																				"nodeType": "YulFunctionCall",
																				"src": "3244:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3232:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "3232:3:6"
																		},
																		"nativeSrc": "3232:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "3232:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3214:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "3214:6:6"
																},
																"nativeSrc": "3214:51:6",
																"nodeType": "YulFunctionCall",
																"src": "3214:51:6"
															},
															"nativeSrc": "3214:51:6",
															"nodeType": "YulExpressionStatement",
															"src": "3214:51:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3285:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "3285:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3296:2:6",
																				"nodeType": "YulLiteral",
																				"src": "3296:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3281:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "3281:3:6"
																		},
																		"nativeSrc": "3281:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "3281:18:6"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3301:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "3301:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3274:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "3274:6:6"
																},
																"nativeSrc": "3274:34:6",
																"nodeType": "YulFunctionCall",
																"src": "3274:34:6"
															},
															"nativeSrc": "3274:34:6",
															"nodeType": "YulExpressionStatement",
															"src": "3274:34:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "3040:274:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3130:9:6",
														"nodeType": "YulTypedName",
														"src": "3130:9:6",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3141:6:6",
														"nodeType": "YulTypedName",
														"src": "3141:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3149:6:6",
														"nodeType": "YulTypedName",
														"src": "3149:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3160:4:6",
														"nodeType": "YulTypedName",
														"src": "3160:4:6",
														"type": ""
													}
												],
												"src": "3040:274:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$729__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_5abc40a724a85ea2ea76b4fa1aa78ad5521549a2c0f7a2342461f22350a5c27b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Total supply is zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"791": [
									{
										"length": 32,
										"start": 279
									},
									{
										"length": 32,
										"start": 857
									},
									{
										"length": 32,
										"start": 1327
									}
								],
								"794": [
									{
										"length": 32,
										"start": 361
									},
									{
										"length": 32,
										"start": 506
									},
									{
										"length": 32,
										"start": 1062
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610090575f3560e01c80635a230162116100635780635a230162146100e057806370a08231146100f357806372f702f314610112578063a694fc3a14610151578063f7c618c114610164575f80fd5b80630dcc4b441461009457806318160ddd146100a95780632e17de78146100c55780634e71d92d146100d8575b5f80fd5b6100a76100a236600461060b565b61018b565b005b6100b260015481565b6040519081526020015b60405180910390f35b6100a76100d336600461060b565b6102a4565b6100b26103d0565b6100b26100ee366004610622565b610497565b6100b2610101366004610622565b5f6020819052908152604090205481565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100bc565b6100a761015f36600461060b565b6104c9565b6101397f000000000000000000000000000000000000000000000000000000000000000081565b5f600154116101d85760405162461bcd60e51b8152602060048201526014602482015273546f74616c20737570706c79206973207a65726f60601b60448201526064015b60405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015610248573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026c9190610648565b50600154610282670de0b6b3a76400008361067b565b61028c9190610692565b60025f82825461029c91906106b1565b909155505050565b335f908152602081905260409020548111156102f95760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016101cf565b61030233610566565b335f90815260208190526040812080548392906103209084906106c4565b925050819055508060015f82825461033891906106c4565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044015b6020604051808303815f875af11580156103a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cc9190610648565b5050565b5f6103da33610566565b335f90815260036020526040902054801561049257335f81815260036020526040808220919091555163a9059cbb60e01b81526004810191909152602481018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af115801561046c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104909190610648565b505b919050565b5f6104a1826105b9565b6001600160a01b0383165f908152600360205260409020546104c391906106b1565b92915050565b6104d233610566565b335f90815260208190526040812080548392906104f09084906106b1565b925050819055508060015f82825461050891906106b1565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd9060640161038c565b61056f816105b9565b6001600160a01b0382165f90815260036020526040812080549091906105969084906106b1565b90915550506002546001600160a01b039091165f90815260046020526040902055565b6001600160a01b0381165f90815260208181526040808320546004909252822054600254670de0b6b3a7640000916105f0916106c4565b6105fa908361067b565b6106049190610692565b9392505050565b5f6020828403121561061b575f80fd5b5035919050565b5f60208284031215610632575f80fd5b81356001600160a01b0381168114610604575f80fd5b5f60208284031215610658575f80fd5b81518015158114610604575f80fd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176104c3576104c3610667565b5f826106ac57634e487b7160e01b5f52601260045260245ffd5b500490565b808201808211156104c3576104c3610667565b818103818111156104c3576104c361066756fea26469706673582212207b133e49171d198cccd95862b80482f5b166e2fead1ed51f5f43450f1860a9cf64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x90 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5A230162 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x5A230162 EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x164 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDCC4B44 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x2E17DE78 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0xD8 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH2 0xA2 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB2 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA7 PUSH2 0xD3 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0xB2 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x622 JUMP JUMPDEST PUSH2 0x497 JUMP JUMPDEST PUSH2 0xB2 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x622 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x139 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBC JUMP JUMPDEST PUSH2 0xA7 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST PUSH2 0x4C9 JUMP JUMPDEST PUSH2 0x139 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 SLOAD GT PUSH2 0x1D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x546F74616C20737570706C79206973207A65726F PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x248 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x282 PUSH8 0xDE0B6B3A7640000 DUP4 PUSH2 0x67B JUMP JUMPDEST PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x692 JUMP JUMPDEST PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1CF JUMP JUMPDEST PUSH2 0x302 CALLER PUSH2 0x566 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x320 SWAP1 DUP5 SWAP1 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x6C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3A8 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3CC SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x3DA CALLER PUSH2 0x566 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x492 JUMPI CALLER PUSH0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x490 SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x4A1 DUP3 PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4D2 CALLER PUSH2 0x566 JUMP JUMPDEST CALLER PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x4F0 SWAP1 DUP5 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH2 0x38C JUMP JUMPDEST PUSH2 0x56F DUP2 PUSH2 0x5B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x596 SWAP1 DUP5 SWAP1 PUSH2 0x6B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x4 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH1 0x2 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH2 0x5F0 SWAP2 PUSH2 0x6C4 JUMP JUMPDEST PUSH2 0x5FA SWAP1 DUP4 PUSH2 0x67B JUMP JUMPDEST PUSH2 0x604 SWAP2 SWAP1 PUSH2 0x692 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x61B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x632 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x604 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x658 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x604 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x667 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x6AC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x667 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4C3 JUMPI PUSH2 0x4C3 PUSH2 0x667 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x133E49171D198CCCD95862B80482F5B166E2FEAD1ED51F5F43450F18 PUSH1 0xA9 0xCF PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "119:3570:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1221:404;;;;;;:::i;:::-;;:::i;:::-;;430:23;;;;;;;;;345:25:6;;;333:2;318:18;430:23:5;;;;;;;;3031:285;;;;;;:::i;:::-;;:::i;3403:283::-;;;:::i;2051:147::-;;;;;;:::i;:::-;;:::i;361:41::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;208:36;;;;;;;;-1:-1:-1;;;;;850:32:6;;;832:51;;820:2;805:18;208:36:5;672:217:6;2692:246:5;;;;;;:::i;:::-;;:::i;284:35::-;;;;;1221:404;1301:1;1289:11;;:13;1281:45;;;;-1:-1:-1;;;1281:45:5;;1096:2:6;1281:45:5;;;1078:21:6;1135:2;1115:18;;;1108:30;-1:-1:-1;;;1154:18:6;;;1147:50;1214:18;;1281:45:5;;;;;;;;;1377:59;;-1:-1:-1;;;1377:59:5;;1402:10;1377:59;;;1445:51:6;1422:4:5;1512:18:6;;;1505:60;1581:18;;;1574:34;;;1377:11:5;-1:-1:-1;;;;;1377:24:5;;;;1418:18:6;;1377:59:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1606:11:5;;1583:19;560:4;1583:6;:19;:::i;:::-;1582:35;;;;:::i;:::-;1567:11;;:50;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1221:404:5:o;3031:285::-;3099:10;3089:9;:21;;;;;;;;;;;:31;-1:-1:-1;3089:31:5;3081:64;;;;-1:-1:-1;;;3081:64:5;;2760:2:6;3081:64:5;;;2742:21:6;2799:2;2779:18;;;2772:30;-1:-1:-1;;;2818:18:6;;;2811:50;2878:18;;3081:64:5;2558:344:6;3081:64:5;3156:26;3171:10;3156:14;:26::i;:::-;3203:10;3193:9;:21;;;;;;;;;;:31;;3218:6;;3193:9;:31;;3218:6;;3193:31;:::i;:::-;;;;;;;;3250:6;3235:11;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;;3267:41:5;;-1:-1:-1;;;3267:41:5;;3289:10;3267:41;;;3214:51:6;3281:18;;;3274:34;;;3267:12:5;-1:-1:-1;;;;;3267:21:5;;;;3187:18:6;;3267:41:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3031:285;:::o;3403:283::-;3438:4;3455:26;3470:10;3455:14;:26::i;:::-;3513:10;3492:11;3506:18;;;:6;:18;;;;;;3539:10;;3535:120;;3573:10;3587:1;3566:18;;;:6;:18;;;;;;:22;;;;3603:40;-1:-1:-1;;;3603:40:5;;;;;3214:51:6;;;;3281:18;;;3274:34;;;-1:-1:-1;;;;;3603:11:5;:20;;;;3187:18:6;;3603:40:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3535:120;3672:6;3403:283;-1:-1:-1;3403:283:5:o;2051:147::-;2122:4;2164:26;2182:7;2164:17;:26::i;:::-;-1:-1:-1;;;;;2146:15:5;;;;;;:6;:15;;;;;;:44;;;;:::i;:::-;2139:51;2051:147;-1:-1:-1;;2051:147:5:o;2692:246::-;2740:26;2755:10;2740:14;:26::i;:::-;2806:10;2796:9;:21;;;;;;;;;;:31;;2821:6;;2796:9;:31;;2821:6;;2796:31;:::i;:::-;;;;;;;;2853:6;2838:11;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;;2870:60:5;;-1:-1:-1;;;2870:60:5;;2896:10;2870:60;;;1445:51:6;2916:4:5;1512:18:6;;;1505:60;1581:18;;;1574:34;;;2870:12:5;-1:-1:-1;;;;;2870:25:5;;;;1418:18:6;;2870:60:5;1243:371:6;2367:232:5;2476:26;2494:7;2476:17;:26::i;:::-;-1:-1:-1;;;;;2457:15:5;;;;;;:6;:15;;;;;:45;;:15;;;:45;;;;;:::i;:::-;;;;-1:-1:-1;;2580:11:5;;-1:-1:-1;;;;;2555:22:5;;;;;;;:13;:22;;;;;:36;2367:232::o;1754:203::-;-1:-1:-1;;;;;1851:18:5;;1820:4;1851:18;;;;;;;;;;;;1912:13;:22;;;;;;1898:11;;560:4;;1898:36;;;:::i;:::-;1888:47;;:6;:47;:::i;:::-;1887:62;;;;:::i;:::-;1880:69;1754:203;-1:-1:-1;;;1754:203:5:o;14:180:6:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:6;;14:180;-1:-1:-1;14:180:6:o;381:286::-;440:6;493:2;481:9;472:7;468:23;464:32;461:52;;;509:1;506;499:12;461:52;535:23;;-1:-1:-1;;;;;587:31:6;;577:42;;567:70;;633:1;630;623:12;1619:277;1686:6;1739:2;1727:9;1718:7;1714:23;1710:32;1707:52;;;1755:1;1752;1745:12;1707:52;1787:9;1781:16;1840:5;1833:13;1826:21;1819:5;1816:32;1806:60;;1862:1;1859;1852:12;1901:127;1962:10;1957:3;1953:20;1950:1;1943:31;1993:4;1990:1;1983:15;2017:4;2014:1;2007:15;2033:168;2106:9;;;2137;;2154:15;;;2148:22;;2134:37;2124:71;;2175:18;;:::i;2206:217::-;2246:1;2272;2262:132;;2316:10;2311:3;2307:20;2304:1;2297:31;2351:4;2348:1;2341:15;2379:4;2376:1;2369:15;2262:132;-1:-1:-1;2408:9:6;;2206:217::o;2428:125::-;2493:9;;;2514:10;;;2511:36;;;2527:18;;:::i;2907:128::-;2974:9;;;2995:11;;;2992:37;;;3009:18;;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "361000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"balanceOf(address)": "2495",
								"calculateRewardEarned(address)": "infinite",
								"claim()": "infinite",
								"rewardToken()": "infinite",
								"stake(uint256)": "infinite",
								"stakingToken()": "infinite",
								"totalSupply()": "2306",
								"unstake(uint256)": "infinite",
								"updateRewardIndex(uint256)": "infinite"
							},
							"internal": {
								"_calculateRewards(address)": "infinite",
								"_updateRewards(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "C0"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 861,
									"end": 1018,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 861,
									"end": 1018,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 929,
									"end": 965,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 929,
									"end": 965,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 929,
									"end": 965,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 929,
									"end": 965,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 929,
									"end": 965,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 976,
									"end": 1010,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 976,
									"end": 1010,
									"name": "PUSH",
									"source": 5,
									"value": "A0"
								},
								{
									"begin": 976,
									"end": 1010,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "8"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 489,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 275,
									"end": 281,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 283,
									"end": 289,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 336,
									"end": 338,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 324,
									"end": 333,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 315,
									"end": 322,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 311,
									"end": 334,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 307,
									"end": 339,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 304,
									"end": 356,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 304,
									"end": 356,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "12"
								},
								{
									"begin": 304,
									"end": 356,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 352,
									"end": 353,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 349,
									"end": 350,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 342,
									"end": 354,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 304,
									"end": 356,
									"name": "tag",
									"source": 6,
									"value": "12"
								},
								{
									"begin": 304,
									"end": 356,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 375,
									"end": 415,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 405,
									"end": 414,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 375,
									"end": 415,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 375,
									"end": 415,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 375,
									"end": 415,
									"name": "tag",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 375,
									"end": 415,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 365,
									"end": 415,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 365,
									"end": 415,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 434,
									"end": 483,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 479,
									"end": 481,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 468,
									"end": 477,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 464,
									"end": 482,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 434,
									"end": 483,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 434,
									"end": 483,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 434,
									"end": 483,
									"name": "tag",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 434,
									"end": 483,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 424,
									"end": 483,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 424,
									"end": 483,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 196,
									"end": 489,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "A0"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "ASSIGNIMMUTABLE",
									"source": 5,
									"value": "794"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "ASSIGNIMMUTABLE",
									"source": 5,
									"value": "791"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 3689,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207b133e49171d198cccd95862b80482f5b166e2fead1ed51f5f43450f1860a9cf64736f6c634300081a0033",
									".code": [
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "5A230162"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "5A230162"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "72F702F3"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "A694FC3A"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "F7C618C1"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "DCC4B44"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "18160DDD"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "2E17DE78"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "4E71D92D"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 3689,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 1221,
											"end": 1625,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1221,
											"end": 1625,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 345,
											"end": 370,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 345,
											"end": 370,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 345,
											"end": 370,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 333,
											"end": 335,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 430,
											"end": 453,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 430,
											"end": 453,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 430,
											"end": 453,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 3031,
											"end": 3316,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 3031,
											"end": 3316,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 3403,
											"end": 3686,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 2051,
											"end": 2198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 2051,
											"end": 2198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 361,
											"end": 402,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "tag",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 361,
											"end": 402,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 361,
											"end": 402,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 208,
											"end": 244,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 208,
											"end": 244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 208,
											"end": 244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 208,
											"end": 244,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "791"
										},
										{
											"begin": 208,
											"end": 244,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 208,
											"end": 244,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 208,
											"end": 244,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 208,
											"end": 244,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 208,
											"end": 244,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 208,
											"end": 244,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 850,
											"end": 882,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 850,
											"end": 882,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 850,
											"end": 882,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 832,
											"end": 883,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 832,
											"end": 883,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 820,
											"end": 822,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 805,
											"end": 823,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 208,
											"end": 244,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 672,
											"end": 889,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "41"
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 2692,
											"end": 2938,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "tag",
											"source": 5,
											"value": "41"
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 2692,
											"end": 2938,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 284,
											"end": 319,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 284,
											"end": 319,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 284,
											"end": 319,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 284,
											"end": 319,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "794"
										},
										{
											"begin": 284,
											"end": 319,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 284,
											"end": 319,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1221,
											"end": 1625,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1301,
											"end": 1302,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1289,
											"end": 1300,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1289,
											"end": 1300,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1302,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1098,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1099,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1137,
											"name": "PUSH",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1115,
											"end": 1133,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1115,
											"end": 1133,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1115,
											"end": 1133,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1138,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "546F74616C20737570706C79206973207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1154,
											"end": 1172,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 1154,
											"end": 1172,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1154,
											"end": 1172,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1147,
											"end": 1197,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1214,
											"end": 1232,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1214,
											"end": 1232,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "tag",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "tag",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 1281,
											"end": 1326,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1402,
											"end": 1412,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1445,
											"end": 1496,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1422,
											"end": 1426,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1512,
											"end": 1530,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1512,
											"end": 1530,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1512,
											"end": 1530,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1505,
											"end": 1565,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1574,
											"end": 1608,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1574,
											"end": 1608,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1574,
											"end": 1608,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1388,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "794"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1377,
											"end": 1401,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1401,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1401,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 1377,
											"end": 1401,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 1377,
											"end": 1436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 1377,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1606,
											"end": 1617,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1606,
											"end": 1617,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1583,
											"end": 1602,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 560,
											"end": 564,
											"name": "PUSH",
											"source": 5,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 1583,
											"end": 1589,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1583,
											"end": 1602,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 1583,
											"end": 1602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1583,
											"end": 1602,
											"name": "tag",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1583,
											"end": 1602,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1582,
											"end": 1617,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 1582,
											"end": 1617,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1582,
											"end": 1617,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1582,
											"end": 1617,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1582,
											"end": 1617,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1582,
											"end": 1617,
											"name": "tag",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 1582,
											"end": 1617,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1578,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1567,
											"end": 1578,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 1567,
											"end": 1617,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1567,
											"end": 1617,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1221,
											"end": 1625,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3099,
											"end": 3109,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3098,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3089,
											"end": 3120,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 3089,
											"end": 3120,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2760,
											"end": 2762,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2742,
											"end": 2763,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2799,
											"end": 2801,
											"name": "PUSH",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 2779,
											"end": 2797,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2779,
											"end": 2797,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2779,
											"end": 2797,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2772,
											"end": 2802,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E742062616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2818,
											"end": 2836,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2818,
											"end": 2836,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2818,
											"end": 2836,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2811,
											"end": 2861,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2878,
											"end": 2896,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2878,
											"end": 2896,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 2558,
											"end": 2902,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3081,
											"end": 3145,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3156,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 3171,
											"end": 3181,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3156,
											"end": 3170,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3156,
											"end": 3182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3156,
											"end": 3182,
											"name": "tag",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 3156,
											"end": 3182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3203,
											"end": 3213,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3202,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3214,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3218,
											"end": 3224,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3218,
											"end": 3224,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3202,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3218,
											"end": 3224,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3218,
											"end": 3224,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 3193,
											"end": 3224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "tag",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3193,
											"end": 3224,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3250,
											"end": 3256,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3246,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3235,
											"end": 3246,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 3235,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "tag",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3235,
											"end": 3256,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3289,
											"end": 3299,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3214,
											"end": 3265,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3281,
											"end": 3299,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 3281,
											"end": 3299,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3281,
											"end": 3299,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3274,
											"end": 3308,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3274,
											"end": 3308,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3274,
											"end": 3308,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3267,
											"end": 3279,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "791"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3267,
											"end": 3288,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3288,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3288,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB"
										},
										{
											"begin": 3267,
											"end": 3288,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3187,
											"end": 3205,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 3187,
											"end": 3205,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 3267,
											"end": 3308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3308,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3031,
											"end": 3316,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3438,
											"end": 3442,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3455,
											"end": 3481,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 3470,
											"end": 3480,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3455,
											"end": 3469,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3455,
											"end": 3481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3455,
											"end": 3481,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 3455,
											"end": 3481,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3513,
											"end": 3523,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3492,
											"end": 3503,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3512,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3539,
											"end": 3549,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3539,
											"end": 3549,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3535,
											"end": 3655,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 3535,
											"end": 3655,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3573,
											"end": 3583,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3587,
											"end": 3588,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3572,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3584,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3588,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3588,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3588,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3566,
											"end": 3588,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3214,
											"end": 3265,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3214,
											"end": 3265,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3214,
											"end": 3265,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3214,
											"end": 3265,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3281,
											"end": 3299,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 3281,
											"end": 3299,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3281,
											"end": 3299,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3274,
											"end": 3308,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3274,
											"end": 3308,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3274,
											"end": 3308,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3603,
											"end": 3614,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "794"
										},
										{
											"begin": 3603,
											"end": 3623,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3623,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3623,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB"
										},
										{
											"begin": 3603,
											"end": 3623,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3187,
											"end": 3205,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 3187,
											"end": 3205,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 3603,
											"end": 3643,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "tag",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3643,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3535,
											"end": 3655,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 3535,
											"end": 3655,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3672,
											"end": 3678,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3403,
											"end": 3686,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3403,
											"end": 3686,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "tag",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2122,
											"end": 2126,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2164,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 2182,
											"end": 2189,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2164,
											"end": 2181,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 2164,
											"end": 2190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2164,
											"end": 2190,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 2164,
											"end": 2190,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2152,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2161,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 2146,
											"end": 2190,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2190,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2190,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2146,
											"end": 2190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2146,
											"end": 2190,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 2146,
											"end": 2190,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2139,
											"end": 2190,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2198,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2051,
											"end": 2198,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "tag",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 2692,
											"end": 2938,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2740,
											"end": 2766,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 2755,
											"end": 2765,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2740,
											"end": 2754,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 2740,
											"end": 2766,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2740,
											"end": 2766,
											"name": "tag",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 2740,
											"end": 2766,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2806,
											"end": 2816,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2805,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2817,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2827,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2827,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2805,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2827,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2821,
											"end": 2827,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2796,
											"end": 2827,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "tag",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2796,
											"end": 2827,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2853,
											"end": 2859,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2849,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2838,
											"end": 2849,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2838,
											"end": 2859,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "tag",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2838,
											"end": 2859,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2896,
											"end": 2906,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1445,
											"end": 1496,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2916,
											"end": 2920,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1512,
											"end": 1530,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1512,
											"end": 1530,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1512,
											"end": 1530,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1505,
											"end": 1565,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1574,
											"end": 1608,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1574,
											"end": 1608,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1574,
											"end": 1608,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2882,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "791"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2870,
											"end": 2895,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2870,
											"end": 2895,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2870,
											"end": 2895,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 2870,
											"end": 2895,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2870,
											"end": 2930,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 1243,
											"end": 1614,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2367,
											"end": 2599,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 2367,
											"end": 2599,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2476,
											"end": 2502,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 2494,
											"end": 2501,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2476,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 2476,
											"end": 2502,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2476,
											"end": 2502,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 2476,
											"end": 2502,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2463,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2457,
											"end": 2502,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2457,
											"end": 2502,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2580,
											"end": 2591,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2580,
											"end": 2591,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2568,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2577,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2555,
											"end": 2591,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2367,
											"end": 2599,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1754,
											"end": 1957,
											"name": "tag",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1754,
											"end": 1957,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1820,
											"end": 1824,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1869,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1925,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1912,
											"end": 1934,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1934,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1934,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1934,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1934,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1934,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1898,
											"end": 1909,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1898,
											"end": 1909,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 560,
											"end": 564,
											"name": "PUSH",
											"source": 5,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 560,
											"end": 564,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1898,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 1898,
											"end": 1934,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1898,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 1898,
											"end": 1934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1898,
											"end": 1934,
											"name": "tag",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 1898,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1888,
											"end": 1935,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1888,
											"end": 1935,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1888,
											"end": 1894,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1888,
											"end": 1935,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 1888,
											"end": 1935,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1888,
											"end": 1935,
											"name": "tag",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1888,
											"end": 1935,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1887,
											"end": 1949,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 1887,
											"end": 1949,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1887,
											"end": 1949,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1887,
											"end": 1949,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1887,
											"end": 1949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1887,
											"end": 1949,
											"name": "tag",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 1887,
											"end": 1949,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1880,
											"end": 1949,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1754,
											"end": 1957,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1754,
											"end": 1957,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 381,
											"end": 667,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 381,
											"end": 667,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 440,
											"end": 446,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 493,
											"end": 495,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 481,
											"end": 490,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 472,
											"end": 479,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 468,
											"end": 491,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 464,
											"end": 496,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 461,
											"end": 513,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 461,
											"end": 513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 461,
											"end": 513,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 509,
											"end": 510,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 506,
											"end": 507,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 499,
											"end": 511,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 461,
											"end": 513,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 461,
											"end": 513,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 535,
											"end": 558,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 535,
											"end": 558,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 587,
											"end": 618,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 587,
											"end": 618,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 577,
											"end": 619,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 577,
											"end": 619,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 567,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 567,
											"end": 637,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 633,
											"end": 634,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 631,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 623,
											"end": 635,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1619,
											"end": 1896,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1619,
											"end": 1896,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1686,
											"end": 1692,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1739,
											"end": 1741,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1727,
											"end": 1736,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1718,
											"end": 1725,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1714,
											"end": 1737,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1742,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1707,
											"end": 1759,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1707,
											"end": 1759,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 1707,
											"end": 1759,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1755,
											"end": 1756,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1752,
											"end": 1753,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1757,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1707,
											"end": 1759,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 1707,
											"end": 1759,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1787,
											"end": 1796,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1781,
											"end": 1797,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1840,
											"end": 1845,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1833,
											"end": 1846,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1826,
											"end": 1847,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1819,
											"end": 1824,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1816,
											"end": 1848,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1806,
											"end": 1866,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 1806,
											"end": 1866,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1862,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1859,
											"end": 1860,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1852,
											"end": 1864,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1901,
											"end": 2028,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 1901,
											"end": 2028,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1962,
											"end": 1972,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 1957,
											"end": 1960,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1953,
											"end": 1973,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1950,
											"end": 1951,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1943,
											"end": 1974,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1993,
											"end": 1997,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1990,
											"end": 1991,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1983,
											"end": 1998,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2021,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2014,
											"end": 2015,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2007,
											"end": 2022,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2033,
											"end": 2201,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 2033,
											"end": 2201,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2106,
											"end": 2115,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2106,
											"end": 2115,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2106,
											"end": 2115,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2146,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2137,
											"end": 2146,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2154,
											"end": 2169,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2154,
											"end": 2169,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2154,
											"end": 2169,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2148,
											"end": 2170,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2148,
											"end": 2170,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2134,
											"end": 2171,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2124,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 2124,
											"end": 2195,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2175,
											"end": 2193,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 2175,
											"end": 2193,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 2175,
											"end": 2193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2206,
											"end": 2423,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 2206,
											"end": 2423,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2272,
											"end": 2273,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2262,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2262,
											"end": 2394,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2316,
											"end": 2326,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 2311,
											"end": 2314,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 2307,
											"end": 2327,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 2304,
											"end": 2305,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2297,
											"end": 2328,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2351,
											"end": 2355,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 2348,
											"end": 2349,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2341,
											"end": 2356,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2379,
											"end": 2383,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2376,
											"end": 2377,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2369,
											"end": 2384,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2262,
											"end": 2394,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2262,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2408,
											"end": 2417,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2408,
											"end": 2417,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2206,
											"end": 2423,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2428,
											"end": 2553,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 2428,
											"end": 2553,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2493,
											"end": 2502,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2493,
											"end": 2502,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2493,
											"end": 2502,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2514,
											"end": 2524,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2514,
											"end": 2524,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2514,
											"end": 2524,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2511,
											"end": 2547,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2511,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 2511,
											"end": 2547,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2527,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 2527,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 2527,
											"end": 2545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2907,
											"end": 3035,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 2907,
											"end": 3035,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 2983,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 2983,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2974,
											"end": 2983,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2995,
											"end": 3006,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2995,
											"end": 3006,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2995,
											"end": 3006,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2992,
											"end": 3029,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2992,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 2992,
											"end": 3029,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 3009,
											"end": 3027,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 3009,
											"end": 3027,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"six/DiscreteStakingRewards.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"calculateRewardEarned(address)": "5a230162",
							"claim()": "4e71d92d",
							"rewardToken()": "f7c618c1",
							"stake(uint256)": "a694fc3a",
							"stakingToken()": "72f702f3",
							"totalSupply()": "18160ddd",
							"unstake(uint256)": "2e17de78",
							"updateRewardIndex(uint256)": "0dcc4b44"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateRewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateRewardIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateRewardEarned(address)\":{\"details\":\"\\u83b7\\u53d6\\u8d26\\u6237\\u603b\\u5f85\\u9886\\u53d6\\u5956\\u52b1\\uff08\\u5916\\u90e8\\u67e5\\u8be2\\u63a5\\u53e3\\uff09\"},\"claim()\":{\"details\":\"\\u9886\\u53d6\\u5956\\u52b1\",\"returns\":{\"_0\":\"\\u5b9e\\u9645\\u9886\\u53d6\\u6570\\u91cf\"}},\"stake(uint256)\":{\"details\":\"\\u8d28\\u62bc\\u64cd\\u4f5c\",\"params\":{\"amount\":\"\\u8d28\\u62bc\\u4ee3\\u5e01\\u6570\\u91cf\"}},\"unstake(uint256)\":{\"details\":\"\\u89e3\\u9664\\u8d28\\u62bc\",\"params\":{\"amount\":\"\\u89e3\\u9664\\u8d28\\u62bc\\u6570\\u91cf\"}},\"updateRewardIndex(uint256)\":{\"details\":\"\\u66f4\\u65b0\\u5168\\u5c40\\u5956\\u52b1\\u6307\\u6570\\uff08\\u4ec5\\u7ba1\\u7406\\u5458\\u53ef\\u8c03\\u7528\\uff09\",\"params\":{\"reward\":\"\\u6ce8\\u5165\\u7684\\u5956\\u52b1\\u4ee3\\u5e01\\u6570\\u91cf \\u516c\\u5f0f\\uff1arewardIndex += (reward * 1e18) / totalSupply\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"six/DiscreteStakingRewards.sol\":\"DiscreteStakingRewards\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171\",\"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"six/DiscreteStakingRewards.sol\":{\"keccak256\":\"0x3a36b0d29d8e9a9804945f439f55c5acabbefa8a129040f39bab5e204dc7f596\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b8472ad740749a20b41fe22d927dd3382347c8e8d4577a35bc4d9a00e2b5af5\",\"dweb:/ipfs/QmQNyseiQyXWRWdHyYuvwG9DdVBXnpFAxN2ALkCGeK1XkQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 798,
								"contract": "six/DiscreteStakingRewards.sol:DiscreteStakingRewards",
								"label": "balanceOf",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 800,
								"contract": "six/DiscreteStakingRewards.sol:DiscreteStakingRewards",
								"label": "totalSupply",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 805,
								"contract": "six/DiscreteStakingRewards.sol:DiscreteStakingRewards",
								"label": "rewardIndex",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 809,
								"contract": "six/DiscreteStakingRewards.sol:DiscreteStakingRewards",
								"label": "earned",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 813,
								"contract": "six/DiscreteStakingRewards.sol:DiscreteStakingRewards",
								"label": "rewardIndexOf",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							136
						],
						"IERC20Errors": [
							41
						],
						"IERC721Errors": [
							89
						]
					},
					"id": 137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:0",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 41,
							"linearizedBaseContracts": [
								41
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 11,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "654:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "670:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "687:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:0"
									},
									"src": "623:80:0"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 16,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "891:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:0"
									},
									"src": "866:41:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 21,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "1104:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:0"
									},
									"src": "1077:45:0"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:0",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 30,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1511:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1528:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1547:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:0"
									},
									"src": "1478:85:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 35,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1775:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:0"
									},
									"src": "1748:45:0"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:0",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 40,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2025:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 37,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:0"
									},
									"src": "1999:43:0"
								}
							],
							"scope": 137,
							"src": "280:1764:0",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 42,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:0",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 89,
							"linearizedBaseContracts": [
								89
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:0",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 47,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2469:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:0"
									},
									"src": "2444:40:0"
								},
								{
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:0",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 52,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2656:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:0"
									},
									"src": "2627:46:0"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:0",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 61,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3000:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3016:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3033:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:0"
									},
									"src": "2973:75:0"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 66,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "3237:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:0"
									},
									"src": "3211:42:0"
								},
								{
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 71,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "3451:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:0"
									},
									"src": "3423:46:0"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 78,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3760:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3778:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:0"
									},
									"src": "3727:68:0"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 83,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "4008:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:0"
									},
									"src": "3980:46:0"
								},
								{
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 88,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4262:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:0"
									},
									"src": "4234:46:0"
								}
							],
							"scope": 137,
							"src": "2190:2092:0",
							"usedErrors": [
								47,
								52,
								61,
								66,
								71,
								78,
								83,
								88
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 90,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:0",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 136,
							"linearizedBaseContracts": [
								136
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 101,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4860:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4876:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4893:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4909:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:0"
									},
									"src": "4827:99:0"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 106,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "5116:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:0"
									},
									"src": "5089:43:0"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 111,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "5331:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:0"
									},
									"src": "5302:47:0"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 118,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5651:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5669:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:0"
									},
									"src": "5616:68:0"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 123,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5898:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:0"
									},
									"src": "5869:47:0"
								},
								{
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 128,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "6153:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:0"
									},
									"src": "6124:47:0"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:0",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 135,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6494:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6513:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:0"
									},
									"src": "6462:73:0"
								}
							],
							"scope": 137,
							"src": "4430:2107:0",
							"usedErrors": [
								101,
								106,
								111,
								118,
								123,
								128,
								135
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							785
						],
						"ERC20": [
							651
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 652,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 730,
							"src": "131:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 139,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "139:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 756,
							"src": "168:63:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 141,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 755,
										"src": "176:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 144,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 786,
							"src": "232:48:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 143,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 785,
										"src": "240:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 146,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 137,
							"src": "281:65:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 145,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 41,
										"src": "289:12:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 148,
										"name": "Context",
										"nameLocations": [
											"1133:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 785,
										"src": "1133:7:1"
									},
									"id": 149,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:1"
								},
								{
									"baseName": {
										"id": 150,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "1142:6:1"
									},
									"id": 151,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:1"
								},
								{
									"baseName": {
										"id": 152,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 755,
										"src": "1150:14:1"
									},
									"id": 153,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:1"
								},
								{
									"baseName": {
										"id": 154,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 41,
										"src": "1166:12:1"
									},
									"id": 155,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:1"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 651,
							"linearizedBaseContracts": [
								651,
								41,
								755,
								729,
								785
							],
							"name": "ERC20",
							"nameLocation": "1124:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 159,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1185:53:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 158,
										"keyName": "account",
										"keyNameLocation": "1201:7:1",
										"keyType": {
											"id": 156,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 157,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 165,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1245:83:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 164,
										"keyName": "account",
										"keyNameLocation": "1261:7:1",
										"keyType": {
											"id": 160,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 163,
											"keyName": "spender",
											"keyNameLocation": "1288:7:1",
											"keyType": {
												"id": 161,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 162,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 167,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1335:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 166,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 169,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1370:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 168,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 171,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1396:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 170,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "1657:57:1",
										"statements": [
											{
												"expression": {
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 179,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 169,
														"src": "1667:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 180,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 174,
														"src": "1675:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1667:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "1667:13:1"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 183,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 171,
														"src": "1690:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "1700:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1690:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "1690:17:1"
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "1425:171:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 188,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1627:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1613:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 173,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1613:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1648:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1634:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 175,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1634:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1612:44:1"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1657:0:1"
									},
									"scope": 651,
									"src": "1601:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										742
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "1839:29:1",
										"statements": [
											{
												"expression": {
													"id": 194,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 169,
													"src": "1856:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 193,
												"id": 195,
												"nodeType": "Return",
												"src": "1849:12:1"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1720:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1788:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1824:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 191,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1824:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:15:1"
									},
									"scope": 651,
									"src": "1779:89:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										748
									],
									"body": {
										"id": 205,
										"nodeType": "Block",
										"src": "2043:31:1",
										"statements": [
											{
												"expression": {
													"id": 203,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 171,
													"src": "2060:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 202,
												"id": 204,
												"nodeType": "Return",
												"src": "2053:14:1"
											}
										]
									},
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "1874:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1990:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1996:2:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2028:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 200,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2028:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:1"
									},
									"scope": 651,
									"src": "1981:93:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										754
									],
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "2763:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2780:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 211,
												"id": 213,
												"nodeType": "Return",
												"src": "2773:9:1"
											}
										]
									},
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "2080:622:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2716:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2756:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 209,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2756:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2755:7:1"
									},
									"scope": 651,
									"src": "2707:82:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										678
									],
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "2910:36:1",
										"statements": [
											{
												"expression": {
													"id": 221,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 167,
													"src": "2927:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 220,
												"id": 222,
												"nodeType": "Return",
												"src": "2920:19:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2795:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2858:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2869:2:1"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "2901:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2901:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2900:9:1"
									},
									"scope": 651,
									"src": "2849:97:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										686
									],
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "3078:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 232,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "3095:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 234,
													"indexExpression": {
														"id": 233,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "3105:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3095:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 231,
												"id": 235,
												"nodeType": "Return",
												"src": "3088:25:1"
											}
										]
									},
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "2952:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3013:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3022:17:1"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3069:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3068:9:1"
									},
									"scope": 651,
									"src": "3004:116:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										696
									],
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "3390:103:1",
										"statements": [
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3408:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "3400:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 247,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3400:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 249,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "3416:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3416:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3400:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "3448:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 254,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "3455:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 255,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "3459:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 252,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "3438:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3438:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "3438:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3482:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 246,
												"id": 259,
												"nodeType": "Return",
												"src": "3475:11:1"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3126:184:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3324:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3341:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3333:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3333:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3353:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3345:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3345:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:27:1"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3384:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 244,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3384:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:6:1"
									},
									"scope": 651,
									"src": "3315:178:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										706
									],
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "3640:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 271,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 165,
															"src": "3657:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 273,
														"indexExpression": {
															"id": 272,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "3669:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3657:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 275,
													"indexExpression": {
														"id": 274,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "3676:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3657:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 270,
												"id": 276,
												"nodeType": "Return",
												"src": "3650:34:1"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "3499:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3560:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3578:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3570:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3593:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3585:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3585:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3569:32:1"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3631:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3631:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3630:9:1"
									},
									"scope": 651,
									"src": "3551:140:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										716
									],
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4077:107:1",
										"statements": [
											{
												"assignments": [
													289
												],
												"declarations": [
													{
														"constant": false,
														"id": 289,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4095:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4087:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 288,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4087:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 292,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 290,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "4103:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4103:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4087:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 294,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "4134:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 295,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4141:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 296,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "4150:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 293,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 542,
														"src": "4125:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4125:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "4125:31:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4173:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 287,
												"id": 300,
												"nodeType": "Return",
												"src": "4166:11:1"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "3697:296:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4007:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4023:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4015:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4015:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4040:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4032:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4014:32:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4071:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 285,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4071:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4070:6:1"
									},
									"scope": 651,
									"src": "3998:186:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										728
									],
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "4869:151:1",
										"statements": [
											{
												"assignments": [
													315
												],
												"declarations": [
													{
														"constant": false,
														"id": 315,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4887:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 333,
														"src": "4879:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 314,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4879:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 318,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 316,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "4897:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4879:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "4935:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "4941:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 322,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "4950:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 319,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "4919:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4919:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "4919:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 326,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "4976:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 327,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "4982:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 328,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "4986:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 325,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "4966:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4966:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "4966:26:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5009:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 313,
												"id": 332,
												"nodeType": "Return",
												"src": "5002:11:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "4190:581:1",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4785:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4806:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4798:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4820:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4812:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4832:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4824:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4824:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4797:41:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4863:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4862:6:1"
									},
									"scope": 651,
									"src": "4776:244:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "5462:231:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 344,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 337,
														"src": "5476:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 347,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5492:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5484:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 345,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5484:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5484:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5476:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "5472:86:1",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "5496:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5544:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5536:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 351,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5536:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5536:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 350,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "5517:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5517:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 356,
															"nodeType": "RevertStatement",
															"src": "5510:37:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 359,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "5571:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5585:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5577:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 360,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5577:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5577:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5571:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 373,
												"nodeType": "IfStatement",
												"src": "5567:86:1",
												"trueBody": {
													"id": 372,
													"nodeType": "Block",
													"src": "5589:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 368,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5639:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5631:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 366,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5631:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5631:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 365,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "5610:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5610:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 371,
															"nodeType": "RevertStatement",
															"src": "5603:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 375,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "5670:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 376,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "5676:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 377,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "5680:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 374,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "5662:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5662:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 379,
												"nodeType": "ExpressionStatement",
												"src": "5662:24:1"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "5026:362:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5402:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5420:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5412:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5412:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5434:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5426:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5446:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5438:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5438:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5411:41:1"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5462:0:1"
									},
									"scope": 651,
									"src": "5393:300:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "6083:1032:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 391,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "6097:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6113:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6105:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 392,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6105:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6105:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6097:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 428,
													"nodeType": "Block",
													"src": "6271:362:1",
													"statements": [
														{
															"assignments": [
																403
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 403,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6293:11:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 428,
																	"src": "6285:19:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 402,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6285:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 407,
															"initialValue": {
																"baseExpression": {
																	"id": 404,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 159,
																	"src": "6307:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 406,
																"indexExpression": {
																	"id": 405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "6317:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6307:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6285:37:1"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 408,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "6340:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 409,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6354:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6340:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 418,
															"nodeType": "IfStatement",
															"src": "6336:115:1",
															"trueBody": {
																"id": 417,
																"nodeType": "Block",
																"src": "6361:90:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 412,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 384,
																					"src": "6411:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 413,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 403,
																					"src": "6417:11:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 414,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "6430:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 411,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 11,
																				"src": "6386:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6386:50:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 416,
																		"nodeType": "RevertStatement",
																		"src": "6379:57:1"
																	}
																]
															}
														},
														{
															"id": 427,
															"nodeType": "UncheckedBlock",
															"src": "6464:159:1",
															"statements": [
																{
																	"expression": {
																		"id": 425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 419,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6571:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 421,
																			"indexExpression": {
																				"id": 420,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 384,
																				"src": "6581:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6571:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 422,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 403,
																				"src": "6589:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 423,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 388,
																				"src": "6603:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6589:19:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6571:37:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 426,
																	"nodeType": "ExpressionStatement",
																	"src": "6571:37:1"
																}
															]
														}
													]
												},
												"id": 429,
												"nodeType": "IfStatement",
												"src": "6093:540:1",
												"trueBody": {
													"id": 401,
													"nodeType": "Block",
													"src": "6117:148:1",
													"statements": [
														{
															"expression": {
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 397,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 167,
																	"src": "6233:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 398,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6249:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6233:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 400,
															"nodeType": "ExpressionStatement",
															"src": "6233:21:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 430,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "6647:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6661:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6653:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 431,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6653:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6653:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6647:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 449,
													"nodeType": "Block",
													"src": "6862:206:1",
													"statements": [
														{
															"id": 448,
															"nodeType": "UncheckedBlock",
															"src": "6876:182:1",
															"statements": [
																{
																	"expression": {
																		"id": 446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 442,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "7021:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 444,
																			"indexExpression": {
																				"id": 443,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "7031:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7021:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 445,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "7038:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7021:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 447,
																	"nodeType": "ExpressionStatement",
																	"src": "7021:22:1"
																}
															]
														}
													]
												},
												"id": 450,
												"nodeType": "IfStatement",
												"src": "6643:425:1",
												"trueBody": {
													"id": 441,
													"nodeType": "Block",
													"src": "6665:191:1",
													"statements": [
														{
															"id": 440,
															"nodeType": "UncheckedBlock",
															"src": "6679:167:1",
															"statements": [
																{
																	"expression": {
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 436,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 167,
																			"src": "6810:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 437,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "6826:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6810:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 439,
																	"nodeType": "ExpressionStatement",
																	"src": "6810:21:1"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 452,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "7092:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 453,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "7098:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 454,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "7102:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 451,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "7083:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7083:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 456,
												"nodeType": "EmitStatement",
												"src": "7078:30:1"
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "5699:304:1",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6017:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6033:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6025:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6025:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6047:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6039:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6059:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6051:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6051:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6024:41:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6083:0:1"
									},
									"scope": 651,
									"src": "6008:1107:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "7514:152:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 466,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "7528:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7547:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7539:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 467,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7539:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 470,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7539:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7528:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 480,
												"nodeType": "IfStatement",
												"src": "7524:91:1",
												"trueBody": {
													"id": 479,
													"nodeType": "Block",
													"src": "7551:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7601:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 474,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7593:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 473,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7593:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 476,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7593:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 472,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "7572:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7572:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 478,
															"nodeType": "RevertStatement",
															"src": "7565:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7640:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7632:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 482,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7632:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7632:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 486,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "7644:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 487,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "7653:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 481,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "7624:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7624:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "7624:35:1"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "7121:332:1",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7467:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7481:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7473:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7473:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7498:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7490:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7490:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7472:32:1"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7514:0:1"
									},
									"scope": 651,
									"src": "7458:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "8040:150:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 499,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "8054:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8073:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8065:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 500,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8065:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8065:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8054:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 513,
												"nodeType": "IfStatement",
												"src": "8050:89:1",
												"trueBody": {
													"id": 512,
													"nodeType": "Block",
													"src": "8077:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 508,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8125:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8117:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 506,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8117:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8117:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 505,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "8098:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8098:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 511,
															"nodeType": "RevertStatement",
															"src": "8091:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "8156:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8173:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8165:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 516,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8165:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8165:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 520,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "8177:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 514,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "8148:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8148:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "8148:35:1"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "7672:307:1",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7993:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8007:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "7999:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7999:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8024:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "8016:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8016:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7998:32:1"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8040:0:1"
									},
									"scope": 651,
									"src": "7984:206:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 541,
										"nodeType": "Block",
										"src": "8800:54:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 535,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "8819:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "8826:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "8835:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8842:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 534,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 602,
														"src": "8810:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8810:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "ExpressionStatement",
												"src": "8810:37:1"
											}
										]
									},
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "8196:525:1",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8735:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8752:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "8744:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8744:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8767:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "8759:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8759:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8784:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "8776:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8776:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8743:47:1"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8800:0:1"
									},
									"scope": 651,
									"src": "8726:128:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 601,
										"nodeType": "Block",
										"src": "9799:334:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 554,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "9813:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9830:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9822:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 555,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9822:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9822:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9813:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 568,
												"nodeType": "IfStatement",
												"src": "9809:89:1",
												"trueBody": {
													"id": 567,
													"nodeType": "Block",
													"src": "9834:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9884:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 562,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9876:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 561,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9876:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9876:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 560,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "9855:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9855:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 566,
															"nodeType": "RevertStatement",
															"src": "9848:39:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 569,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "9911:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9930:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9922:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 570,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9922:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9922:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9911:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 583,
												"nodeType": "IfStatement",
												"src": "9907:90:1",
												"trueBody": {
													"id": 582,
													"nodeType": "Block",
													"src": "9934:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 578,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9983:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 577,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9975:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 576,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9975:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9975:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 575,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "9955:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9955:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 581,
															"nodeType": "RevertStatement",
															"src": "9948:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 584,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 165,
																"src": "10006:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 587,
															"indexExpression": {
																"id": 585,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 545,
																"src": "10018:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10006:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 588,
														"indexExpression": {
															"id": 586,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "10025:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10006:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 589,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "10036:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10006:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "10006:35:1"
											},
											{
												"condition": {
													"id": 592,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 551,
													"src": "10055:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 600,
												"nodeType": "IfStatement",
												"src": "10051:76:1",
												"trueBody": {
													"id": 599,
													"nodeType": "Block",
													"src": "10066:61:1",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 594,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 545,
																		"src": "10094:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 595,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 547,
																		"src": "10101:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 596,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "10110:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 593,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "10085:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10085:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 598,
															"nodeType": "EmitStatement",
															"src": "10080:36:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "8860:836:1",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9710:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9727:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9719:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9719:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9742:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9734:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9734:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9759:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9751:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9751:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9771:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9766:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 550,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9766:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9718:63:1"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9799:0:1"
									},
									"scope": 651,
									"src": "9701:432:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 649,
										"nodeType": "Block",
										"src": "10504:387:1",
										"statements": [
											{
												"assignments": [
													613
												],
												"declarations": [
													{
														"constant": false,
														"id": 613,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10522:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 649,
														"src": "10514:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 612,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10514:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 618,
												"initialValue": {
													"arguments": [
														{
															"id": 615,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "10551:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "10558:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 614,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 278,
														"src": "10541:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10541:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10514:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 619,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "10580:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10604:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 621,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10604:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 620,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10599:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10599:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10613:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10599:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10580:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 648,
												"nodeType": "IfStatement",
												"src": "10576:309:1",
												"trueBody": {
													"id": 647,
													"nodeType": "Block",
													"src": "10618:267:1",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 626,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 613,
																	"src": "10636:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 627,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "10655:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10636:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 636,
															"nodeType": "IfStatement",
															"src": "10632:130:1",
															"trueBody": {
																"id": 635,
																"nodeType": "Block",
																"src": "10662:100:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 630,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 607,
																					"src": "10714:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 631,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "10723:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 632,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "10741:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 629,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "10687:26:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 633,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10687:60:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 634,
																		"nodeType": "RevertStatement",
																		"src": "10680:67:1"
																	}
																]
															}
														},
														{
															"id": 646,
															"nodeType": "UncheckedBlock",
															"src": "10775:100:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 638,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 605,
																				"src": "10812:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 639,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 607,
																				"src": "10819:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 642,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 640,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "10828:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 641,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "10847:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10828:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 643,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10854:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 637,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				542,
																				602
																			],
																			"referencedDeclaration": 602,
																			"src": "10803:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10803:57:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 645,
																	"nodeType": "ExpressionStatement",
																	"src": "10803:57:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "10139:271:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10424:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10448:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10440:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10463:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10455:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10455:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10480:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10472:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10472:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10439:47:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10504:0:1"
									},
									"scope": 651,
									"src": "10415:476:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 652,
							"src": "1106:9787:1",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "105:10789:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						]
					},
					"id": 730,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 653,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 654,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:2",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 729,
							"linearizedBaseContracts": [
								729
							],
							"name": "IERC20",
							"nameLocation": "214:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 663,
									"name": "Transfer",
									"nameLocation": "396:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "405:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "427:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "447:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:2"
									},
									"src": "390:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 672,
									"name": "Approval",
									"nameLocation": "627:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "636:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 668,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "659:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "684:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:2"
									},
									"src": "621:78:2"
								},
								{
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:2",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 678,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:2"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "821:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:2"
									},
									"scope": 729,
									"src": "775:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:2",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 686,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 729,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:2",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 696,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1222:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1234:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:2"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1267:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 693,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:2"
									},
									"scope": 729,
									"src": "1204:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1567:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1582:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:2"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1622:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:2"
									},
									"scope": 729,
									"src": "1548:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:2",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 716,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2326:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2343:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:2"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2376:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 713,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:2"
									},
									"scope": 729,
									"src": "2309:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 728,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2712:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2726:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2738:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:2"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2771:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 725,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:2"
									},
									"scope": 729,
									"src": "2690:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 730,
							"src": "204:2575:2",
							"usedErrors": [],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "106:2674:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 756,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 731,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 733,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 730,
							"src": "151:37:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 732,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "159:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 735,
										"name": "IERC20",
										"nameLocations": [
											"306:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "306:6:3"
									},
									"id": 736,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:3"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 734,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:3",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 755,
							"linearizedBaseContracts": [
								755,
								729
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 742,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:3"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "417:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 739,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:3"
									},
									"scope": 755,
									"src": "378:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:3"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "540:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 745,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:3"
									},
									"scope": 755,
									"src": "499:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:3"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "674:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 751,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:3"
									},
									"scope": 755,
									"src": "631:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 756,
							"src": "278:405:3",
							"usedErrors": [],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "125:559:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							785
						]
					},
					"id": 786,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 757,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 758,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 785,
							"linearizedBaseContracts": [
								785
							],
							"name": "Context",
							"nameLocation": "642:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "718:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 763,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 762,
												"id": 765,
												"nodeType": "Return",
												"src": "728:17:4"
											}
										]
									},
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 785,
									"src": "656:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "825:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 772,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:4",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 771,
												"id": 774,
												"nodeType": "Return",
												"src": "835:15:4"
											}
										]
									},
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "809:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:4"
									},
									"scope": 785,
									"src": "758:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 783,
										"nodeType": "Block",
										"src": "935:25:4",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 781,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 780,
												"id": 782,
												"nodeType": "Return",
												"src": "945:8:4"
											}
										]
									},
									"id": 784,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:4"
									},
									"returnParameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "926:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:4"
									},
									"scope": 785,
									"src": "863:97:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 786,
							"src": "624:338:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:4"
				},
				"id": 4
			},
			"six/DiscreteStakingRewards.sol": {
				"ast": {
					"absolutePath": "six/DiscreteStakingRewards.sol",
					"exportedSymbols": {
						"Context": [
							785
						],
						"DiscreteStakingRewards": [
							1051
						],
						"ERC20": [
							651
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 1052,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 787,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 788,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1052,
							"sourceUnit": 652,
							"src": "60:55:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DiscreteStakingRewards",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1051,
							"linearizedBaseContracts": [
								1051
							],
							"name": "DiscreteStakingRewards",
							"nameLocation": "128:22:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "72f702f3",
									"id": 791,
									"mutability": "immutable",
									"name": "stakingToken",
									"nameLocation": "232:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "208:36:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$729",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 790,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 789,
											"name": "IERC20",
											"nameLocations": [
												"208:6:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 729,
											"src": "208:6:5"
										},
										"referencedDeclaration": 729,
										"src": "208:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$729",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f7c618c1",
									"id": 794,
									"mutability": "immutable",
									"name": "rewardToken",
									"nameLocation": "308:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "284:35:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$729",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 793,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 792,
											"name": "IERC20",
											"nameLocations": [
												"284:6:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 729,
											"src": "284:6:5"
										},
										"referencedDeclaration": 729,
										"src": "284:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$729",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "70a08231",
									"id": 798,
									"mutability": "mutable",
									"name": "balanceOf",
									"nameLocation": "393:9:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "361:41:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 797,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 795,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "369:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "361:24:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 796,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "380:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "18160ddd",
									"id": 800,
									"mutability": "mutable",
									"name": "totalSupply",
									"nameLocation": "442:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "430:23:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 799,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "430:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 803,
									"mutability": "constant",
									"name": "MULTIPLIER",
									"nameLocation": "547:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "525:39:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 801,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "525:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31653138",
										"id": 802,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "560:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000"
										},
										"value": "1e18"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 805,
									"mutability": "mutable",
									"name": "rewardIndex",
									"nameLocation": "655:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "642:24:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 804,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "642:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 809,
									"mutability": "mutable",
									"name": "earned",
									"nameLocation": "742:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "709:39:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 808,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 806,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "717:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "709:24:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 807,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "728:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 813,
									"mutability": "mutable",
									"name": "rewardIndexOf",
									"nameLocation": "839:13:5",
									"nodeType": "VariableDeclaration",
									"scope": 1051,
									"src": "806:46:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 812,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 810,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "814:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "806:24:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 811,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "825:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 832,
										"nodeType": "Block",
										"src": "918:100:5",
										"statements": [
											{
												"expression": {
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 820,
														"name": "stakingToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 791,
														"src": "929:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$729",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 822,
																"name": "_stakingToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 815,
																"src": "951:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 821,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "944:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$729_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 823,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "944:21:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$729",
															"typeString": "contract IERC20"
														}
													},
													"src": "929:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$729",
														"typeString": "contract IERC20"
													}
												},
												"id": 825,
												"nodeType": "ExpressionStatement",
												"src": "929:36:5"
											},
											{
												"expression": {
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 826,
														"name": "rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "976:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$729",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 828,
																"name": "_rewardToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 817,
																"src": "997:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 827,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "990:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$729_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 829,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "990:20:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$729",
															"typeString": "contract IERC20"
														}
													},
													"src": "976:34:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$729",
														"typeString": "contract IERC20"
													}
												},
												"id": 831,
												"nodeType": "ExpressionStatement",
												"src": "976:34:5"
											}
										]
									},
									"id": 833,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "_stakingToken",
												"nameLocation": "881:13:5",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "873:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "873:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "_rewardToken",
												"nameLocation": "904:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "896:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 816,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "896:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "872:45:5"
									},
									"returnParameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "918:0:5"
									},
									"scope": 1051,
									"src": "861:157:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 867,
										"nodeType": "Block",
										"src": "1270:355:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 840,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 800,
																"src": "1289:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1301:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1289:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546f74616c20737570706c79206973207a65726f",
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1303:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5abc40a724a85ea2ea76b4fa1aa78ad5521549a2c0f7a2342461f22350a5c27b",
																"typeString": "literal_string \"Total supply is zero\""
															},
															"value": "Total supply is zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5abc40a724a85ea2ea76b4fa1aa78ad5521549a2c0f7a2342461f22350a5c27b",
																"typeString": "literal_string \"Total supply is zero\""
															}
														],
														"id": 839,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1281:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1281:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 845,
												"nodeType": "ExpressionStatement",
												"src": "1281:45:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 849,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1402:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1406:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1402:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 853,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1422:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_DiscreteStakingRewards_$1051",
																		"typeString": "contract DiscreteStakingRewards"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_DiscreteStakingRewards_$1051",
																		"typeString": "contract DiscreteStakingRewards"
																	}
																],
																"id": 852,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1414:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 851,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1414:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1414:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 855,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 836,
															"src": "1429:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 846,
															"name": "rewardToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 794,
															"src": "1377:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$729",
																"typeString": "contract IERC20"
															}
														},
														"id": 848,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1389:12:5",
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 728,
														"src": "1377:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1377:59:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 857,
												"nodeType": "ExpressionStatement",
												"src": "1377:59:5"
											},
											{
												"expression": {
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 858,
														"name": "rewardIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 805,
														"src": "1567:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 859,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 836,
																		"src": "1583:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 860,
																		"name": "MULTIPLIER",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 803,
																		"src": "1592:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1583:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 862,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1582:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 863,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "1606:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1582:35:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1567:50:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "1567:50:5"
											}
										]
									},
									"documentation": {
										"id": 834,
										"nodeType": "StructuredDocumentation",
										"src": "1026:189:5",
										"text": " @dev 更新全局奖励指数（仅管理员可调用）\n @param reward 注入的奖励代币数量\n 公式：rewardIndex += (reward * 1e18) / totalSupply"
									},
									"functionSelector": "0dcc4b44",
									"id": 868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateRewardIndex",
									"nameLocation": "1230:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "1253:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "1248:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 835,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1248:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1247:13:5"
									},
									"returnParameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1270:0:5"
									},
									"scope": 1051,
									"src": "1221:404:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 894,
										"nodeType": "Block",
										"src": "1826:131:5",
										"statements": [
											{
												"assignments": [
													877
												],
												"declarations": [
													{
														"constant": false,
														"id": 877,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "1842:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 894,
														"src": "1837:11:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 876,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1837:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 881,
												"initialValue": {
													"baseExpression": {
														"id": 878,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "1851:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 880,
													"indexExpression": {
														"id": 879,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 871,
														"src": "1861:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1851:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1837:32:5"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 889,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 882,
																	"name": "shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 877,
																	"src": "1888:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 887,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 883,
																				"name": "rewardIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 805,
																				"src": "1898:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"baseExpression": {
																					"id": 884,
																					"name": "rewardIndexOf",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 813,
																					"src": "1912:13:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 886,
																				"indexExpression": {
																					"id": 885,
																					"name": "account",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 871,
																					"src": "1926:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "1912:22:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1898:36:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 888,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1897:38:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1888:47:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 890,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1887:49:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 891,
														"name": "MULTIPLIER",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 803,
														"src": "1939:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1887:62:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 875,
												"id": 893,
												"nodeType": "Return",
												"src": "1880:69:5"
											}
										]
									},
									"documentation": {
										"id": 869,
										"nodeType": "StructuredDocumentation",
										"src": "1633:115:5",
										"text": " @dev 计算账户待领取的增量奖励\n @return 基于指数差计算的新增奖励"
									},
									"id": 895,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateRewards",
									"nameLocation": "1763:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1789:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "1781:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1781:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1780:17:5"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "1820:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 873,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1820:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1819:6:5"
									},
									"scope": 1051,
									"src": "1754:203:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 911,
										"nodeType": "Block",
										"src": "2128:70:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 903,
															"name": "earned",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 809,
															"src": "2146:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 905,
														"indexExpression": {
															"id": 904,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 898,
															"src": "2153:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2146:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [
															{
																"id": 907,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "2182:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 906,
															"name": "_calculateRewards",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "2164:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view returns (uint256)"
															}
														},
														"id": 908,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2164:26:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2146:44:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 902,
												"id": 910,
												"nodeType": "Return",
												"src": "2139:51:5"
											}
										]
									},
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "1965:80:5",
										"text": " @dev 获取账户总待领取奖励（外部查询接口）"
									},
									"functionSelector": "5a230162",
									"id": 912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateRewardEarned",
									"nameLocation": "2060:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2090:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "2082:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2082:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2081:17:5"
									},
									"returnParameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "2122:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 900,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2122:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2121:6:5"
									},
									"scope": 1051,
									"src": "2051:147:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 932,
										"nodeType": "Block",
										"src": "2416:183:5",
										"statements": [
											{
												"expression": {
													"id": 924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 918,
															"name": "earned",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 809,
															"src": "2457:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 920,
														"indexExpression": {
															"id": 919,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "2464:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2457:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 922,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 915,
																"src": "2494:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 921,
															"name": "_calculateRewards",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 895,
															"src": "2476:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view returns (uint256)"
															}
														},
														"id": 923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2476:26:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2457:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 925,
												"nodeType": "ExpressionStatement",
												"src": "2457:45:5"
											},
											{
												"expression": {
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 926,
															"name": "rewardIndexOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "2555:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 928,
														"indexExpression": {
															"id": 927,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "2569:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2555:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 929,
														"name": "rewardIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 805,
														"src": "2580:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2555:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 931,
												"nodeType": "ExpressionStatement",
												"src": "2555:36:5"
											}
										]
									},
									"documentation": {
										"id": 913,
										"nodeType": "StructuredDocumentation",
										"src": "2206:155:5",
										"text": " @dev 更新用户奖励状态（关键内部函数）\n 1. 将新增奖励计入earned\n 2. 更新用户奖励指数快照"
									},
									"id": 933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateRewards",
									"nameLocation": "2376:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2399:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "2391:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 914,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2391:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:17:5"
									},
									"returnParameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2416:0:5"
									},
									"scope": 1051,
									"src": "2367:232:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 967,
										"nodeType": "Block",
										"src": "2729:209:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 940,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2755:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2759:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2755:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 939,
														"name": "_updateRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "2740:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2740:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 943,
												"nodeType": "ExpressionStatement",
												"src": "2740:26:5"
											},
											{
												"expression": {
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 944,
															"name": "balanceOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "2796:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 947,
														"indexExpression": {
															"expression": {
																"id": 945,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2806:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2810:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2806:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2796:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 948,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 936,
														"src": "2821:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2796:31:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 950,
												"nodeType": "ExpressionStatement",
												"src": "2796:31:5"
											},
											{
												"expression": {
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 951,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "2838:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 952,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 936,
														"src": "2853:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2838:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 954,
												"nodeType": "ExpressionStatement",
												"src": "2838:21:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 958,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2896:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2900:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2896:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 962,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2916:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_DiscreteStakingRewards_$1051",
																		"typeString": "contract DiscreteStakingRewards"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_DiscreteStakingRewards_$1051",
																		"typeString": "contract DiscreteStakingRewards"
																	}
																],
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2908:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 960,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2908:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 963,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2908:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 964,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 936,
															"src": "2923:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 955,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "2870:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$729",
																"typeString": "contract IERC20"
															}
														},
														"id": 957,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2883:12:5",
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 728,
														"src": "2870:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2870:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 966,
												"nodeType": "ExpressionStatement",
												"src": "2870:60:5"
											}
										]
									},
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "2607:79:5",
										"text": " @dev 质押操作\n @param amount 质押代币数量"
									},
									"functionSelector": "a694fc3a",
									"id": 968,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "stake",
									"nameLocation": "2701:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2712:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "2707:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 935,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2707:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2706:13:5"
									},
									"returnParameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2729:0:5"
									},
									"scope": 1051,
									"src": "2692:246:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1008,
										"nodeType": "Block",
										"src": "3070:246:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 975,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 798,
																	"src": "3089:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 978,
																"indexExpression": {
																	"expression": {
																		"id": 976,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3099:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3103:6:5",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3099:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3089:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 979,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 971,
																"src": "3114:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3089:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e742062616c616e6365",
															"id": 981,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3122:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
																"typeString": "literal_string \"Insufficient balance\""
															},
															"value": "Insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
																"typeString": "literal_string \"Insufficient balance\""
															}
														],
														"id": 974,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3081:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3081:64:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 983,
												"nodeType": "ExpressionStatement",
												"src": "3081:64:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 985,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3171:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 986,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3175:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3171:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 984,
														"name": "_updateRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "3156:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3156:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 988,
												"nodeType": "ExpressionStatement",
												"src": "3156:26:5"
											},
											{
												"expression": {
													"id": 994,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 989,
															"name": "balanceOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "3193:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 992,
														"indexExpression": {
															"expression": {
																"id": 990,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3203:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3207:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3203:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3193:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 993,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "3218:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3193:31:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 995,
												"nodeType": "ExpressionStatement",
												"src": "3193:31:5"
											},
											{
												"expression": {
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 996,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "3235:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 997,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "3250:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3235:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 999,
												"nodeType": "ExpressionStatement",
												"src": "3235:21:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1003,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3289:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1004,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3293:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3289:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1005,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 971,
															"src": "3301:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1000,
															"name": "stakingToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "3267:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$729",
																"typeString": "contract IERC20"
															}
														},
														"id": 1002,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3280:8:5",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 696,
														"src": "3267:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1006,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3267:41:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1007,
												"nodeType": "ExpressionStatement",
												"src": "3267:41:5"
											}
										]
									},
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "2946:79:5",
										"text": " @dev 解除质押\n @param amount 解除质押数量"
									},
									"functionSelector": "2e17de78",
									"id": 1009,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unstake",
									"nameLocation": "3040:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3053:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1009,
												"src": "3048:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 970,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3048:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3047:13:5"
									},
									"returnParameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3070:0:5"
									},
									"scope": 1051,
									"src": "3031:285:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1049,
										"nodeType": "Block",
										"src": "3444:242:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1016,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3470:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3474:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3470:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1015,
														"name": "_updateRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "3455:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3455:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1019,
												"nodeType": "ExpressionStatement",
												"src": "3455:26:5"
											},
											{
												"assignments": [
													1021
												],
												"declarations": [
													{
														"constant": false,
														"id": 1021,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "3497:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1049,
														"src": "3492:11:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1020,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3492:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1026,
												"initialValue": {
													"baseExpression": {
														"id": 1022,
														"name": "earned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 809,
														"src": "3506:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1025,
													"indexExpression": {
														"expression": {
															"id": 1023,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3513:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1024,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3517:6:5",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3513:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3506:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3492:32:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1027,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1021,
														"src": "3539:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1028,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3548:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3539:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1046,
												"nodeType": "IfStatement",
												"src": "3535:120:5",
												"trueBody": {
													"id": 1045,
													"nodeType": "Block",
													"src": "3551:104:5",
													"statements": [
														{
															"expression": {
																"id": 1035,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1030,
																		"name": "earned",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 809,
																		"src": "3566:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1033,
																	"indexExpression": {
																		"expression": {
																			"id": 1031,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3573:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1032,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3577:6:5",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3573:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3566:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1034,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3587:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3566:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1036,
															"nodeType": "ExpressionStatement",
															"src": "3566:22:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1040,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3624:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1041,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3628:6:5",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3624:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1042,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1021,
																		"src": "3636:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1037,
																		"name": "rewardToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 794,
																		"src": "3603:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$729",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1039,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3615:8:5",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 696,
																	"src": "3603:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1043,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3603:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1044,
															"nodeType": "ExpressionStatement",
															"src": "3603:40:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1047,
													"name": "reward",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1021,
													"src": "3672:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1014,
												"id": 1048,
												"nodeType": "Return",
												"src": "3665:13:5"
											}
										]
									},
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "3324:73:5",
										"text": " @dev 领取奖励\n @return 实际领取数量"
									},
									"functionSelector": "4e71d92d",
									"id": 1050,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claim",
									"nameLocation": "3412:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3417:2:5"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "3438:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1012,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3438:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3437:6:5"
									},
									"scope": 1051,
									"src": "3403:283:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1052,
							"src": "119:3570:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:3656:5"
				},
				"id": 5
			}
		}
	}
}